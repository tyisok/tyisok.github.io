<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tyの小站</title>
  
  <subtitle>very good</subtitle>
  <link href="https://tyisok.github.io/atom.xml" rel="self"/>
  
  <link href="https://tyisok.github.io/"/>
  <updated>2022-04-13T14:41:53.498Z</updated>
  <id>https://tyisok.github.io/</id>
  
  <author>
    <name>Tianyu Shao</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JDBC学习(与数据库连接操作数据库)</title>
    <link href="https://tyisok.github.io/2022/04/13/jdbc/"/>
    <id>https://tyisok.github.io/2022/04/13/jdbc/</id>
    <published>2022-04-13T14:18:36.000Z</published>
    <updated>2022-04-13T14:41:53.498Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><h1 id="jdbc学习（梳理）"><a href="#jdbc学习（梳理）" class="headerlink" title="jdbc学习（梳理）"></a>jdbc学习（梳理）</h1><p>常规 普通Statement<br>     * 干活前工具导齐  BuildPath</p><p>连接工具Conn某数据库.java文件</p><ul><li>1.加载驱动类(注册驱动类)   Class.forName(“导入的驱动类名”)</li><li>2.获取连接通道  Connection对象获得DriverManager.getConnection(url,user,password)</li></ul><p>Dao层.java</p><ul><li>3.在Dao层引入数据库连接通道，创建载体</li><li>4.将sql语句装入executeUpdate（更新）或executeQuery（查询收集）</li><li>5.关闭资源，先开的通道conn，又使用了载体st，如果查询还打开了结果集</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection conn <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"oracle.jdbc.driver.OracleDriver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//不同驱动类名不同</span>                        String url <span class="token operator">=</span> <span class="token string">"jdbc:oracle:thin:@localhost:1521:tiger"</span><span class="token punctuation">;</span>            String user <span class="token operator">=</span> <span class="token string">"scott"</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> <span class="token string">"tigertiger"</span><span class="token punctuation">;</span>            conn <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>user<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//DriverManager直接利用getConnection获取三条属性</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> conn<span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//获取连接通道</span><span class="token comment" spellcheck="true">//Connection最为重要的方法就是获取Statement</span>Connection conn <span class="token operator">=</span> ConnOracle<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建空载体</span><span class="token comment" spellcheck="true">//为了防止sql注入选择Statement子类PreparedStatement</span>PreparedStatement pst <span class="token operator">=</span> null<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//创建并装载sql语句</span><span class="token comment" spellcheck="true">//相比父类，pst用占位符替换字符串拼接</span>String sql<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//预编译sql语句，装载</span>pst<span class="token operator">=</span>conn<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//载体空出来的位置使用set方法装载</span>pst<span class="token punctuation">.</span><span class="token function">setObject</span><span class="token punctuation">(</span>下标，占位值<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//装载完成后，执行，pst与st区别在于sql语句已经封装完成不必放入参数</span>pst<span class="token punctuation">.</span><span class="token function">executeUpdate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rs<span class="token operator">=</span>pst<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取结果集</span><span class="token comment" spellcheck="true">//收集信息</span><span class="token comment" spellcheck="true">//rs是一个表，收集数据使用rs.getObject();</span><span class="token comment" spellcheck="true">//循环收集数据while(rs.next!=null)</span><span class="token comment" spellcheck="true">//执行更新后有返回值，返回值是影响的行数</span><span class="token comment" spellcheck="true">//完成数据库操作后需要在finally关闭资源</span><span class="token comment" spellcheck="true">//先开的通道，在创建的载体,如果是查询还会开结果集</span></code></pre><h4 id="关于sql"><a href="#关于sql" class="headerlink" title="关于sql"></a>关于sql</h4><p>多条件查询where 1=1</p><p>分页显示需要使用伪列每次获得范围内的数据</p><p>Batch多条sql同时执行，需要用到batch</p><p>conn.setAutoCommit(false);自动事务提交</p><p>conn.commit();手动事务提交</p><p>pst.addBatch();循环将值传入prepareStatemen的模板中</p><h1 id="jdbc学习（转自网络）"><a href="#jdbc学习（转自网络）" class="headerlink" title="jdbc学习（转自网络）"></a>jdbc学习（转自网络）</h1><p>JDBC（Java DataBase Connectivity）就是Java数据库连接</p><h3 id="1-什么是JDBC"><a href="#1-什么是JDBC" class="headerlink" title="1 什么是JDBC"></a>1 什么是JDBC</h3><p> JDBC（Java DataBase Connectivity）就是Java数据库连接，说白了就是用Java语言来操作数据库。原来我们操作数据库是在控制台使用SQL语句来操作数据库，JDBC是用Java语言向数据库发送SQL语句。</p><h3 id="2-JDBC原理"><a href="#2-JDBC原理" class="headerlink" title="2 JDBC原理"></a>2 JDBC原理</h3><p>早期SUN公司的天才们想编写一套可以连接天下所有数据库的API，但是当他们刚刚开始时就发现这是不可完成的任务，因为各个厂商的数据库服务器差异太大了。后来SUN开始与数据库厂商们讨论，最终得出的结论是，由SUN提供一套访问数据库的规范（就是一组接口），并提供连接数据库的协议标准，然后各个数据库厂商会遵循SUN的规范提供一套访问自己公司的数据库服务器的API出现。SUN提供的规范命名为JDBC，而各个厂商提供的，遵循了JDBC规范的，可以访问自己数据库的API被称之为驱动！</p><p><img src="/2022/04/13/jdbc/first.png" alt="img"></p><p>JDBC是接口，而JDBC驱动才是接口的实现，没有驱动无法完成数据库连接！每个数据库厂商都有自己的驱动，用来连接自己公司的数据库。</p><p>当然还有第三方公司专门为某一数据库提供驱动，这样的驱动往往不是开源免费的！</p><h3 id="3-JDBC核心类（接口）介绍"><a href="#3-JDBC核心类（接口）介绍" class="headerlink" title="3 JDBC核心类（接口）介绍"></a>3 JDBC核心类（接口）介绍</h3><p>JDBC中的核心类有：DriverManager、Connection、Statement，和ResultSet！</p><p><strong>DriverManger</strong>（驱动管理器）的作用有两个：</p><p>　　l 注册驱动：这可以让JDBC知道要使用的是哪个驱动；</p><p>　　l 获取Connection：如果可以获取到Connection，那么说明已经与数据库连接上了。</p><p><strong>Connection</strong>对象表示连接，与数据库的通讯都是通过这个对象展开的：</p><p>　　l Connection最为重要的一个方法就是用来获取Statement对象；</p><p>　　l Statement是用来向数据库发送SQL语句的，这样数据库就会执行发送过来的SQL语句</p><p>　　l void executeUpdate(String sql)：执行更新操作（insert、update、delete等）；</p><p>　　l ResultSet executeQuery(String sql)：执行查询操作，数据库在执行查询后会把查询结果，查询结果就是ResultSet；</p><p><strong>ResultSet</strong>对象表示查询结果集，只有在执行查询操作后才会有结果集的产生。结果集是一个二维的表格，有行有列。操作结果集要学习移动ResultSet内部的“行光标”，以及获取当前行上的每一列上的数据：</p><p>　　l boolean next()：使“行光标”移动到下一行，并返回移动后的行是否存在；</p><p>　　l XXX getXXX(int col)：获取当前行指定列上的值，参数就是列数，列数从1开始，而不是0。</p><h3 id="4-Hello-JDBC"><a href="#4-Hello-JDBC" class="headerlink" title="4 Hello JDBC"></a>4 Hello JDBC</h3><p> 下面开始编写第一个JDBC程序</p><p>介绍eclipse的相关知识</p><p>单元测试junit</p><h4 id="4-1-导入mysql数据库的驱动jar包："><a href="#4-1-导入mysql数据库的驱动jar包：" class="headerlink" title="4.1 导入mysql数据库的驱动jar包："></a>4.1 导入mysql数据库的驱动jar包：</h4><p>mysql-connector-java-5.1.39-bin.jar；</p><h4 id="4-2-注册驱动"><a href="#4-2-注册驱动" class="headerlink" title="4.2 注册驱动"></a>4.2 注册驱动</h4><p>DriverManager类的registerDriver()方法的参数是java.sql.Driver，但java.sql.Driver是一个接口，实现类由mysql驱动来提供，mysql驱动中的java.sql.Driver接口的实现类为com.mysql.jdbc.Driver！那么注册驱动的代码如下：</p><p><strong>DriverManager.registerDriver(new com.mysql.jdbc.Driver());</strong></p><p>上面代码虽然可以注册驱动，但是出现硬编码（代码依赖mysql驱动jar包），如果将来想连接Oracle数据库，那么必须要修改代码的。并且其实这种注册驱动的方式是注册了两次驱动！</p><p>JDBC中规定，驱动类在被加载时，需要自己“主动”把自己注册到DriverManger中，下面我们来看看com.mysql.jdbc.Driver类的源代码：</p><p>com.mysql.jdbc.Driver.java</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Driver</span> <span class="token keyword">extends</span> <span class="token class-name">NonRegisteringDriver</span> <span class="token keyword">implements</span> <span class="token class-name">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>Driver</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span>DriverManager<span class="token punctuation">.</span><span class="token function">registerDriver</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Driver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">SQLException</span> E<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Can't register driver!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>……<span class="token punctuation">}</span></code></pre><p>　　com.mysql.jdbc.Driver类中的static块会创建本类对象，并注册到DriverManager中。这说明只要去加载com.mysql.jdbc.Driver类，那么就会执行这个static块，从而也就会把com.mysql.jdbc.Driver注册到DriverManager中，所以可以把<strong>注册驱动类</strong>的代码修改为<strong>加载驱动类</strong>。</p><p>Class.forName(“com.mysql.jdbc.Driver”); </p><h4 id="4-3-获取连接"><a href="#4-3-获取连接" class="headerlink" title="4.3 获取连接"></a>4.3 获取连接</h4><p>获取连接需要两步，一是使用DriverManager来注册驱动，二是使用DriverManager来获取Connection对象。</p><p>获取连接的也只有一句代码：</p><p>DriverManager.getConnection(url,username,password)，</p><p>其中username和password是登录数据库的用户名和密码，如果我没说错的话，你的mysql数据库的用户名和密码分别是：root、123。</p><p>url查对复杂一点，它是用来找到要连接数据库“网址”，就好比你要浏览器中查找百度时，也需要提供一个url。下面是mysql的url：</p><pre class=" language-java"><code class="language-java">jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>mydb1</code></pre><p>JDBC规定url的格式由三部分组成，每个部分中间使用冒号分隔。</p><p>　　l 第一部分是jdbc，这是固定的；</p><p>　　l 第二部分是数据库名称，那么连接mysql数据库，第二部分当然是mysql了；</p><p>　　l 第三部分是由数据库厂商规定的，我们需要了解每个数据库厂商的要求，mysql的第三部分分别由数据库服务器的IP地址（localhost）、端口号（3306），以及DATABASE名称(mydb1)组成。</p><p>下面是获取连接的语句：</p><pre class=" language-java"><code class="language-java">Connection con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>“jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>web08”<span class="token punctuation">,</span>”root”<span class="token punctuation">,</span>”root”<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>还可以在url中提供参数：</p><p>jdbc:mysql://localhost:3306/web08**?useUnicode=true&amp;characterEncoding=UTF8**</p><p>useUnicode参数指定这个连接数据库的过程中，使用的字节集是Unicode字节集；</p><p>characherEncoding参数指定穿上连接数据库的过程中，使用的字节集编码为UTF-8编码。请注意，mysql中指定UTF-8编码是给出的是UTF8，而不是UTF-8。要小心了！</p><p> 　</p><h4 id="4-4-获取Statement"><a href="#4-4-获取Statement" class="headerlink" title="4.4 获取Statement"></a>4.4 获取Statement</h4><p>在得到Connectoin之后，说明已经与数据库连接上了，下面是通过Connection获取Statement对象的代码：</p><pre class=" language-java"><code class="language-java">Statement stmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Statement是用来向数据库发送要执行的SQL语句的！</p><h4 id="4-5-发送SQL查询语句"><a href="#4-5-发送SQL查询语句" class="headerlink" title="4.5 发送SQL查询语句"></a>4.5 发送SQL查询语句</h4><pre class=" language-java"><code class="language-java">String sql <span class="token operator">=</span> “select <span class="token operator">*</span> from user”<span class="token punctuation">;</span>ResultSet rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>请注意，执行查询使用的不是executeUpdate()方法，而是executeQuery()方法。executeQuery()方法返回的是ResultSet，ResultSet封装了查询结果，我们称之为结果集。</p><h4 id="4-6-读取结果集中的数据-注意JDBC的下标从1开始"><a href="#4-6-读取结果集中的数据-注意JDBC的下标从1开始" class="headerlink" title="4.6 读取结果集中的数据 (注意JDBC的下标从1开始)"></a>4.6 读取结果集中的数据 (注意JDBC的下标从1开始)</h4><p>　　ResultSet就是一张二维的表格，它内部有一个“行光标”，光标默认的位置在“第一行上方”，我们可以调用rs对象的next()方法把“行光标”向下移动一行，当第一次调用next()方法时，“行光标”就到了第一行记录的位置，这时就可以使用ResultSet提供的getXXX(int col)方法来获取指定列的数据了：</p><pre class=" language-java"><code class="language-java">rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//光标移动到第一行</span>rs<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取第一行第一列的数据</span></code></pre><p>当你使用rs.getInt(1)方法时，你必须可以肯定第1列的数据类型就是int类型，如果你不能肯定，那么最好使用rs.getObject(1)。在ResultSet类中提供了一系列的getXXX()方法，比较常用的方法有：</p><pre class=" language-java"><code class="language-java">Object <span class="token function">getObject</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token punctuation">)</span>String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token keyword">int</span> <span class="token function">getInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token punctuation">)</span><span class="token keyword">double</span> <span class="token function">getDouble</span><span class="token punctuation">(</span><span class="token keyword">int</span> col<span class="token punctuation">)</span></code></pre><h4 id="4-7-关闭"><a href="#4-7-关闭" class="headerlink" title="4.7 关闭"></a>4.7 关闭</h4><p>与IO流一样，使用后的东西都需要关闭！关闭的顺序是先得到的后关闭，后得到的先关闭。（先开后关）</p><pre class=" language-java"><code class="language-java">rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="4-8-完成查询操作代码"><a href="#4-8-完成查询操作代码" class="headerlink" title="4.8 完成查询操作代码"></a>4.8 完成查询操作代码</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> Connection <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String url <span class="token operator">=</span> <span class="token string">"jdbc:mysql://localhost:3306/web08"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            String username <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String password <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h4 id="4-9-规范化代码"><a href="#4-9-规范化代码" class="headerlink" title="4.9 规范化代码"></a>4.9 规范化代码</h4><p>所谓规范化代码就是无论是否出现异常，都要关闭ResultSet、Statement，以及Connection，如果你还记得IO流的规范化代码，那么下面的代码你就明白什么意思了。</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            con <span class="token operator">=</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"select * from user"</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                String username <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String password <span class="token operator">=</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>username <span class="token operator">+</span> <span class="token string">", "</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>rs <span class="token operator">!=</span> null<span class="token punctuation">)</span> rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>stmt <span class="token operator">!=</span> null<span class="token punctuation">)</span> stmt<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>con <span class="token operator">!=</span> null<span class="token punctuation">)</span> con<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>SQLException e<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="—————————-JDBC对象介绍—————————"><a href="#—————————-JDBC对象介绍—————————" class="headerlink" title="—————————-JDBC对象介绍—————————"></a>—————————-JDBC对象介绍—————————</h3><h4 id="1-JDBC中的主要类（接口）"><a href="#1-JDBC中的主要类（接口）" class="headerlink" title="1 JDBC中的主要类（接口）"></a>1 JDBC中的主要类（接口）</h4><p>在JDBC中常用的类有：</p><p><strong>l DriverManager；</strong></p><p><strong>l Connection；</strong></p><p><strong>l Statement；</strong></p><p><strong>l ResultSet。</strong></p><h4 id><a href="#" class="headerlink" title></a></h4><h4 id="2-DriverManager"><a href="#2-DriverManager" class="headerlink" title="2 DriverManager"></a>2 DriverManager</h4><p>其实我们今后只需要会用DriverManager的getConnection()方法即可：</p><pre class=" language-java"><code class="language-java">   Class<span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span>“com<span class="token punctuation">.</span>mysql<span class="token punctuation">.</span>jdbc<span class="token punctuation">.</span>Driver”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//注册驱动</span>    String url <span class="token operator">=</span> “jdbc<span class="token operator">:</span>mysql<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">3306</span><span class="token operator">/</span>web08”<span class="token punctuation">;</span>  String username <span class="token operator">=</span> “root”<span class="token punctuation">;</span>    String password <span class="token operator">=</span> “root”<span class="token punctuation">;</span>  Connection con <span class="token operator">=</span> DriverManager<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> username<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>注意，上面代码可能出现的两种异常：</p><p>1.ClassNotFoundException：这个异常是在第1句上出现的，出现这个异常有两个可能：</p><p>你没有给出mysql的jar包；</p><p>你把类名称打错了，查看类名是不是com.mysql.jdbc.Driver。</p><p>2.SQLException：这个异常出现在第5句，出现这个异常就是三个参数的问题，往往username和password一般不是出错，所以需要认真查看url是否打错。</p><p>对于DriverManager.registerDriver()方法了解即可，因为我们今后注册驱动只会Class.forName()，而不会使用这个方法。</p><h4 id="3-Connection"><a href="#3-Connection" class="headerlink" title="3 Connection"></a>3 Connection</h4><p>Connection最为重要的方法就是获取Statement：</p><p>l Statement stmt = con.createStatement();</p><p>后面在学习ResultSet方法时，还要学习一下下面的方法：</p><p>l Statement stmt = con.createStatement(int,int);</p><h4 id="4-Statement"><a href="#4-Statement" class="headerlink" title="4 Statement"></a>4 Statement</h4><p>Statement最为重要的方法是：</p><p>l int executeUpdate(String sql)：执行更新操作，即执行insert、update、delete语句，其实这个方法也可以执行create table、alter table，以及drop table等语句，但我们很少会使用JDBC来执行这些语句；</p><p>l ResultSet executeQuery(String sql)：执行查询操作，执行查询操作会返回ResultSet，即结果集。</p><p>l  boolean execute()</p><p>Statement还有一个boolean execute()方法，这个方法可以用来执行增、删、改、查所有SQL语句。该方法返回的是boolean类型，表示SQL语句是否执行成功。</p><p>如果使用execute()方法执行的是更新语句，那么还要调用int getUpdateCount()来获取insert、update、delete语句所影响的行数。</p><p>如果使用execute()方法执行的是查询语句，那么还要调用ResultSet getResultSet()来获取select语句的查询结果。</p><h4 id="5-ResultSet之滚动结果集（了解）"><a href="#5-ResultSet之滚动结果集（了解）" class="headerlink" title="5 ResultSet之滚动结果集（了解）"></a>5 ResultSet之滚动结果集（了解）</h4><p>ResultSet表示结果集，它是一个二维的表格！ResultSet内部维护一个行光标（游标），ResultSet提供了一系列的方法来移动游标：</p><p>l void beforeFirst()：把光标放到第一行的前面，这也是光标默认的位置；</p><p>l void afterLast()：把光标放到最后一行的后面；</p><p>l boolean first()：把光标放到第一行的位置上，返回值表示调控光标是否成功；</p><p>l boolean last()：把光标放到最后一行的位置上；</p><p>l boolean isBeforeFirst()：当前光标位置是否在第一行前面；</p><p>l boolean isAfterLast()：当前光标位置是否在最后一行的后面；</p><p>l boolean isFirst()：当前光标位置是否在第一行上；</p><p>l boolean isLast()：当前光标位置是否在最后一行上；</p><p>l boolean previous()：把光标向上挪一行；</p><p>l boolean next()：把光标向下挪一行；</p><p>l boolean relative(int row)：相对位移，当row为正数时，表示向下移动row行，为负数时表示向上移动row行；</p><p>l boolean absolute(int row)：绝对位移，把光标移动到指定的行上；</p><p>l int getRow()：返回当前光标所有行。</p><p>上面方法分为两类，一类用来判断游标位置的，另一类是用来移动游标的。如果结果集是不可滚动的，那么只能使用next()方法来移动游标，而beforeFirst()、afterLast()、first()、last()、previous()、relative()方法都不能使用！！！</p><p>结果集是否支持滚动，要从Connection类的createStatement()方法说起。也就是说创建的Statement决定了使用Statement创建的ResultSet是否支持滚动。</p><p>Statement createStatement(int resultSetType, int resultSetConcurrency)</p><p>resultSetType的可选值：</p><p>l ResultSet.TYPE_FORWARD_ONLY：不滚动结果集；</p><p>l ResultSet.TYPE_SCROLL_INSENSITIVE：滚动结果集，但结果集数据不会再跟随数据库而变化；</p><p>l ResultSet.TYPE_SCROLL_SENSITIVE：滚动结果集，但结果集数据不会再跟随数据库而变化；</p><p>可以看出，如果想使用滚动的结果集，我们应该选择TYPE_SCROLL_INSENSITIVE！其实很少有数据库驱动会支持TYPE_SCROLL_SENSITIVE的特性！通常我们也不需要查询到的结果集再受到数据库变化的影响。</p><p>resultSetConcurrency的可选值：</p><p>l CONCUR_READ_ONLY：结果集是只读的，不能通过修改结果集而反向影响数据库；</p><p>l CONCUR_UPDATABLE：结果集是可更新的，对结果集的更新可以反向影响数据库。</p><p>通常可更新结果集这一“高级特性”我们也是不需要的！</p><p>获取滚动结果集的代码如下：</p><p>Connection con = …</p><p>Statement stmt = con.createStatement(ResultSet.TYPE_SCROLL_INSENSITIVE, CONCUR_READ_ONLY);</p><p>String sql = …//查询语句</p><p>ResultSet rs = stmt.executeQuery(sql);//这个结果集是可滚动的</p><h4 id="6-ResultSet之获取列数据"><a href="#6-ResultSet之获取列数据" class="headerlink" title="6 ResultSet之获取列数据"></a>6 ResultSet之获取列数据</h4><p>可以通过next()方法使ResultSet的游标向下移动，当游标移动到你需要的行时，就需要来获取该行的数据了，ResultSet提供了一系列的获取列数据的方法：</p><p>l String getString(int columnIndex)：获取指定列的String类型数据；</p><p>l int getInt(int columnIndex)：获取指定列的int类型数据；</p><p>l double getDouble(int columnIndex)：获取指定列的double类型数据；</p><p>l boolean getBoolean(int columnIndex)：获取指定列的boolean类型数据；</p><p>l Object getObject(int columnIndex)：获取指定列的Object类型的数据。</p><p>上面方法中，参数columnIndex表示列的索引，列索引从1开始，而不是0，这第一点与数组不同。如果你清楚当前列的数据类型，那么可以使用getInt()之类的方法来获取，如果你不清楚列的类型，那么你应该使用getObject()方法来获取。</p><p>ResultSet还提供了一套通过列名称来获取列数据的方法：</p><p>l String getString(String columnName)：获取名称为columnName的列的String数据；</p><p>l int getInt(String columnName)：获取名称为columnName的列的int数据；</p><p>l double getDouble(String columnName)：获取名称为columnName的列的double数据；</p><p>l boolean getBoolean(String columnName)：获取名称为columnName的列的boolean数据；</p><p>l Object getObject(String columnName)：获取名称为columnName的列的Object数据；</p><h3 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h3><h4 id="1-什么是SQL攻击"><a href="#1-什么是SQL攻击" class="headerlink" title="1 什么是SQL攻击"></a>1 什么是SQL攻击</h4><p>在需要用户输入的地方，用户输入的是SQL语句的片段，最终用户输入的SQL片段与我们DAO中写的SQL语句合成一个完整的SQL语句！例如用户在登录时输入的用户名和密码都是为SQL语句的片段！</p><h4 id="2-演示SQL攻击"><a href="#2-演示SQL攻击" class="headerlink" title="2 演示SQL攻击"></a>2 演示SQL攻击</h4><p>首先我们需要创建一张用户表，用来存储用户的信息。</p><p><strong>CREATE TABLE user(</strong>  <strong>uid CHAR(32) PRIMARY KEY,</strong>  <strong>username  VARCHAR(30) UNIQUE KEY NOT NULL,</strong>  <strong>PASSWORD  VARCHAR(30)****);</strong> **INSERT INTO user VALUES(‘U_1001’, ‘zs’, ‘zs’);**<strong>SELECT * FROM user;</strong></p><p>现在用户表中只有一行记录，就是zs。</p><p>下面我们写一个login()方法！</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span>String username<span class="token punctuation">,</span> String password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Connection con <span class="token operator">=</span> null<span class="token punctuation">;</span>        Statement stmt <span class="token operator">=</span> null<span class="token punctuation">;</span>        ResultSet rs <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            con <span class="token operator">=</span> JdbcUtils<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">createStatement</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String sql <span class="token operator">=</span> <span class="token string">"SELECT * FROM user WHERE "</span> <span class="token operator">+</span>                    <span class="token string">"username='"</span> <span class="token operator">+</span> username <span class="token operator">+</span>                     <span class="token string">"' and password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">;</span>            rs <span class="token operator">=</span> stmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"欢迎"</span> <span class="token operator">+</span> rs<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"用户名或密码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            JdbcUtils<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span>con<span class="token punctuation">,</span> stmt<span class="token punctuation">,</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>            <span class="token punctuation">}</span></code></pre><p>下面是调用这个方法的代码：</p><pre class=" language-java"><code class="language-java"><span class="token function">login</span><span class="token punctuation">(</span><span class="token string">"a' or 'a'='a"</span><span class="token punctuation">,</span> <span class="token string">"a' or 'a'='a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>这行当前会使我们登录成功！因为是输入的用户名和密码是SQL语句片段，最终与我们的login()方法中的SQL语句组合在一起！我们来看看组合在一起的SQL语句：</p><pre class=" language-java"><code class="language-java">SELECT <span class="token operator">*</span> FROM tab_user WHERE username<span class="token operator">=</span><span class="token string">'a'</span> or <span class="token string">'a'</span><span class="token operator">=</span><span class="token string">'a'</span> and password<span class="token operator">=</span><span class="token string">'a'</span> or <span class="token string">'a'</span><span class="token operator">=</span><span class="token string">'a'</span></code></pre><h4 id="3-防止SQL攻击"><a href="#3-防止SQL攻击" class="headerlink" title="3 防止SQL攻击"></a>3 防止SQL攻击</h4><p>l 过滤用户输入的数据中是否包含非法字符；</p><p>l 分步校验！先使用用户名来查询用户，如果查找到了，再比较密码；</p><p>l 使用PreparedStatement。</p><h4 id="4-PreparedStatement是什么？"><a href="#4-PreparedStatement是什么？" class="headerlink" title="4 PreparedStatement是什么？"></a>4 PreparedStatement是什么？</h4><p>PreparedStatement叫预编译声明！</p><p>PreparedStatement是Statement的子接口，你可以使用PreparedStatement来替换Statement。</p><p>PreparedStatement的好处：</p><p>l 防止SQL攻击；</p><p>l 提高代码的可读性，以可维护性；</p><p>l 提高效率。</p><h4 id="5-PreparedStatement的使用"><a href="#5-PreparedStatement的使用" class="headerlink" title="5 PreparedStatement的使用"></a>5 PreparedStatement的使用</h4><p>l 使用Connection的prepareStatement(String sql)：即创建它时就让它与一条SQL模板绑定；</p><p>l 调用PreparedStatement的setXXX()系列方法为问号设置值</p><p>l 调用executeUpdate()或executeQuery()方法，但要注意，调用没有参数的方法；</p><pre class=" language-java"><code class="language-java">String sql <span class="token operator">=</span> “select <span class="token operator">*</span> from tab_student where s_number<span class="token operator">=</span><span class="token operator">?</span>”<span class="token punctuation">;</span>PreparedStatement pstmt <span class="token operator">=</span> con<span class="token punctuation">.</span><span class="token function">prepareStatement</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">;</span>pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> “S_1001”<span class="token punctuation">)</span><span class="token punctuation">;</span>ResultSet rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>rs<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pstmt<span class="token punctuation">.</span><span class="token function">clearParameters</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>pstmt<span class="token punctuation">.</span><span class="token function">setString</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> “S_1002”<span class="token punctuation">)</span><span class="token punctuation">;</span>rs <span class="token operator">=</span> pstmt<span class="token punctuation">.</span><span class="token function">executeQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在使用Connection创建PreparedStatement对象时需要给出一个SQL模板，所谓SQL模板就是有“?”的SQL语句，其中“?”就是参数。</p><p>在得到PreparedStatement对象后，调用它的setXXX()方法为“?”赋值，这样就可以得到把模板变成一条完整的SQL语句，然后再调用PreparedStatement对象的executeQuery()方法获取ResultSet对象。</p><p>注意PreparedStatement对象独有的executeQuery()方法是没有参数的，而Statement的executeQuery()是需要参数（SQL语句）的。因为在创建PreparedStatement对象时已经让它与一条SQL模板绑定在一起了，所以在调用它的executeQuery()和executeUpdate()方法时就不再需要参数了。</p><p>PreparedStatement最大的好处就是在于重复使用同一模板，给予其不同的参数来重复的使用它。这才是真正提高效率的原因。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;h1 id=&quot;jdbc学习（梳理）&quot;&gt;&lt;a href=&quot;#jdbc学习（梳理）&quot; class=&quot;headerlink&quot; title=&quot;jdbc学习（梳理）&quot;&gt;&lt;/a&gt;jdbc学习（梳理）</summary>
      
    
    
    
    
    <category term="Java" scheme="https://tyisok.github.io/tags/Java/"/>
    
    <category term="JDBC" scheme="https://tyisok.github.io/tags/JDBC/"/>
    
  </entry>
  
  <entry>
    <title>Django+Vue进阶开发</title>
    <link href="https://tyisok.github.io/2022/04/07/djangovue-jin-jie/"/>
    <id>https://tyisok.github.io/2022/04/07/djangovue-jin-jie/</id>
    <published>2022-04-07T07:21:59.000Z</published>
    <updated>2022-04-07T07:45:14.040Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DjangoVue进阶开发"><a href="#DjangoVue进阶开发" class="headerlink" title="DjangoVue进阶开发"></a>DjangoVue进阶开发</h1><p>先上工具包</p><p>一</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DjangoVue进阶开发&quot;&gt;&lt;a href=&quot;#DjangoVue进阶开发&quot; class=&quot;headerlink&quot; title=&quot;DjangoVue进阶开发&quot;&gt;&lt;/a&gt;DjangoVue进阶开发&lt;/h1&gt;&lt;p&gt;先上工具包&lt;/p&gt;
&lt;p&gt;一&lt;/p&gt;
</summary>
      
    
    
    
    <category term="Web开发" scheme="https://tyisok.github.io/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Django" scheme="https://tyisok.github.io/tags/Django/"/>
    
    <category term="Vue" scheme="https://tyisok.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>虚拟现实技术知识总结</title>
    <link href="https://tyisok.github.io/2022/01/15/xu-ni-xian-shi-ji-zhu/"/>
    <id>https://tyisok.github.io/2022/01/15/xu-ni-xian-shi-ji-zhu/</id>
    <published>2022-01-15T14:14:26.763Z</published>
    <updated>2021-06-07T03:29:13.149Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚拟现实技术"><a href="#虚拟现实技术" class="headerlink" title="虚拟现实技术"></a>虚拟现实技术</h1><h2 id="一、VR基本技术"><a href="#一、VR基本技术" class="headerlink" title="一、VR基本技术"></a>一、VR基本技术</h2><h3 id="1-VR概述"><a href="#1-VR概述" class="headerlink" title="1.VR概述"></a>1.VR概述</h3><p>定义：虚拟现实是由计算机生成的给人以沉浸感的虚拟环境</p><p>特性：沉浸性（模拟驾驶）；交互性（数据手套）；想象性（室内设计）</p><p>分类：桌面式VR，沉浸式VR，增强式VR，分布式VR</p><h3 id="2-VR典型设备"><a href="#2-VR典型设备" class="headerlink" title="2.VR典型设备"></a>2.VR典型设备</h3><p>硬件设备：由输入输出显示设备构成</p><p>跟踪定位设备，立体显示设备，手部数据交互设备，虚拟声音输出设备，其他交互设备</p><h3 id="3-技术"><a href="#3-技术" class="headerlink" title="3.技术"></a>3.技术</h3><h4 id="3-1-3D显示"><a href="#3-1-3D显示" class="headerlink" title="3.1 3D显示"></a>3.1 3D显示</h4><p>3D显示技术就是利用一系列的光学方法使人左右眼产生视差从而接受到不同的画面，在大脑形成3D（3Dimensions）立体效果的技术。</p><p>3D显示分类：</p><p>全息：（Holography）特指一种可以让从物体发射的衍射光能够被重现的3维技术，其位置和大小同之前一模一样。从不同的位置观测此物体，其显示的像也会变化。 </p><p>非全息：  利用光学等方法产生立体的视觉效果，但不能给人主观选择观看的视角 。色分法，光分法，时分法</p><h4 id="3-2-真实感技术"><a href="#3-2-真实感技术" class="headerlink" title="3.2 真实感技术"></a>3.2 真实感技术</h4><p><strong>什么是LOD，阐述其基本思想、作用及应用</strong></p><p>LOD即Level Of Detials细节层次，用若干不同复杂度模型来表示同一对象技术。我们用LOD来描述一个物体在不同距离上进行渲染时可选的细节程度。在不影响画面视觉效果的条件下，通过逐次简化景物的表面细节来减少场景的集合复杂性，从而提高绘制算法效率的技术。</p><p>LOD基本思想：<br>1.对场景中的不同物体或物体的不同部分，采用不同的细节描述方法。<br>2.如果物体离视点比较远，或者物体比较小，可以用较粗的LOD模型绘制。<br>3.如果物体离视点比较近，或者物体比较大，反之用较细的LOD模型绘制。<br>4.对运动快的物体或处于运动中的物体，用较粗的LOD模型，对静止的物体用较细的LOD模型。</p><p>LOD作用：<br>1.对物体定义具有多种细节水平的几何表示<br>2.用户根据实际需要选择相应精细程度的模型，使实时绘制场景成为可能<br>3.有效地控制场景复杂度<br>4.加速图形绘制速度</p><p>LOD应用：虚拟现实，交互式可视化，飞行模拟、3D动画、交互式仿真</p><p>LOD分类：视点无关（速度快需要空间大）视点相关</p><h4 id="3-3-非真实感技术"><a href="#3-3-非真实感技术" class="headerlink" title="3.3 非真实感技术"></a>3.3 非真实感技术</h4><p>特点，效果大于技术</p><p><strong>真实感技术（LOD）与非真实感区别</strong></p><table><thead><tr><th></th><th>真实感绘制</th><th>非真实感绘制</th></tr></thead><tbody><tr><td><strong>基本趋向</strong></td><td>模拟物理世界</td><td>模拟艺术家的风格</td></tr><tr><td><strong>评价方式</strong></td><td>客观</td><td>主观</td></tr><tr><td><strong>基本方法</strong></td><td>模拟物理过程</td><td>研究艺术品特点，研究人类的感知，模拟艺术家的创作</td></tr><tr><td><strong>准确性</strong></td><td>精确</td><td>近似</td></tr><tr><td><strong>细节水平</strong></td><td>相同的细节等级，无法避免细节信息</td><td>可以突出表达重点部分</td></tr></tbody></table><h4 id="3-4-几何建模"><a href="#3-4-几何建模" class="headerlink" title="3.4 几何建模"></a>3.4 几何建模</h4><h4 id="3-5-3D虚拟声音技术"><a href="#3-5-3D虚拟声音技术" class="headerlink" title="3.5 3D虚拟声音技术"></a>3.5 3D虚拟声音技术</h4><p>定义：<br>在虚拟场景中能使用户准确地判断出声源的精确位置、符合人们在真实境界中听觉方式的声音系统称为三维虚拟声音。<br>特点：<br>1、全向三维定位特性（3 D steering）<br>全向三维定位特性是指在三维虚拟空间中把实际声音信号定位到特定虚拟专用源的能力。<br>2、三维实时跟踪特性(3D Rreal－Time Localization)<br>三维实时跟踪特性是指在三维虚拟空间中实时跟踪虚拟声源位置变化或景象变化的能力<br>3、沉浸感与交互性</p><p>作用：<br>①声音是用户和虚拟环境的另一种交互方法，人们可以通过语音与虚拟世界进行双向交流，如语音识别与语音合成等。<br>②数据驱动的声音能传递对象的属性信息。<br>③增强空间信息，尤其是当空间超出了视域范围。</p><p>语音识别三要素音调音色音强</p><p>语音合成3个层次<br>1、从文字到语音的合成（Text-to-Speech）；<br>2、从概念到语音的合成（Concept-to-Speech）；<br>3、从意向到语音的合成（Intention-to-Speech）</p><h4 id="3-6-自然交互与传感技术"><a href="#3-6-自然交互与传感技术" class="headerlink" title="3.6 自然交互与传感技术"></a>3.6 自然交互与传感技术</h4><p>基于位置的服务(LBS)Location-Based Services</p><p>目的：可以随时（Anytime）、随地（Anywhere）为所有的人（Anybody）和事（Anything）提供实时的“4A”服务 </p><p>交互方式：手势面部表情识别，眼动跟踪，触觉反馈</p><h4 id="3-7-碰撞检测技术："><a href="#3-7-碰撞检测技术：" class="headerlink" title="3.7 碰撞检测技术："></a>3.7 碰撞检测技术：</h4><p>在计算机辅助设计与制造（CAD/CAM）、计算几何、机器人和自动化、工程分析、计算机图形学、虚拟现实等领域都遇到了有关碰撞检测的问题，甚至成为其中的关键问题。</p><p>碰撞检测的目的主要有三个：检测模型之间是否发生碰撞，报告发生或即将发生碰撞的部位，动态的查询模型之间的距离。</p><p>定义：假设三维空间中有N个运动模型，随着时间改变位置和姿态，碰撞检测就是判断他们之间是否发生了碰撞</p><p>影响因素：实时性，精确度，模型类别，检测类别，场景特征</p><h2 id="二、VR开发技术"><a href="#二、VR开发技术" class="headerlink" title="二、VR开发技术"></a>二、VR开发技术</h2><h4 id="1-建模软件："><a href="#1-建模软件：" class="headerlink" title="1.建模软件："></a>1.建模软件：</h4><p>3Dmax与Maya区别<br>max的学习较简单，不需要掌握复杂的CG概念，非常适合初学者和效率优先的使用者。<br>maya的学习比较复杂，有大量的菜单系统和隐藏节点。<br>MAX的插件也比较多，有了这些插件的支持MAX实现某些特定效果的效率就大大的提高了。<br>但是在影视方面，追求的更多的是细节的刻画和表现，需要提供给动画师更多可以自由控制的空间，插件越多，集成的东西就越可以施展的空间就会缩小，所以，MAYA中使用者可以随时根据自己的需要编写自己的插件。<br>就工具使用而言，MAYA掌握起来要也许要比MAX难度大一些，但是，MAYA是很多CG艺术家为之疯狂的软件，因为他们的画笔已经从纸面上拓展到了另外一个更广阔的空间。<br>max的快捷和方便，而Maya的综合和灵活性是其可以领军CG界的的法宝。</p><p>基本操作{简单模型创建，灯光，相机，渲染出图，材质}</p><h4 id="2-U3D软件："><a href="#2-U3D软件：" class="headerlink" title="2.U3D软件："></a>2.U3D软件：</h4><p>基本操作</p><p>五个视图：Sence（场景），Game（测试游戏），Hierarchy（层级视图，主要存放对象），Project，Inspector（属性）</p><p>编程——基本交互</p><pre class=" language-c#"><code class="language-c#">//通过按键控制左右移动void FixedUpdate()    {        if (Input.GetKey(KeyCode.A))        {            rs.AddForce(-5, 0, 0);        }        if (Input.GetKey(KeyCode.S))        {            rs.AddForce(5, 0, 0);        }           }</code></pre><p>Update和FixedUpdate</p><p>Update：在每次渲染新的一帧的时候才会调用，这个函数的更新频率和设备的性能有关以及被渲染的物体。这会导致同一个游戏在不同的机器上效果不一致。</p><p>FixedUpdate是在固定的时间间隔执行，不受游戏帧率的影响。在处理Rigidbody的时候最好用FixedUpdate函数</p><p>Transform类：控制对象基本变换操作，例如对象移动的方法是translate(), 对象旋转的是Rotate()</p><p>Input类：获取用户的键盘，鼠标和控制杆等输入设备的输入信息。</p><h4 id="3-全景技术"><a href="#3-全景技术" class="headerlink" title="3.全景技术"></a>3.全景技术</h4><p>基于图像生成真实感图形的虚拟现实技术</p><p>分类：柱形全景，球形全景，立方体全景，对象全景，球形视频</p><p>特点：<br>（1）全景图片不是利用计算机生成的模拟图像，而是通过对物体进行实地拍摄2-6张照片就可以生成，具有很强的真实感。<br>（2）文件容量较小，在网络上传输快。<br>（3）互动性较强，可以用鼠标或键盘控制环视的方向，进行上下、左右、浏览，也可以进行放大缩小。<br>（4） 一般不需单独下载插件，自动下载一个很小的Java程序后就可以通过浏览器在Internet上观看全景照片。</p><h4 id="4-VR开发"><a href="#4-VR开发" class="headerlink" title="4.VR开发"></a>4.VR开发</h4><p>每个阶段的开发任务</p><p>第一阶段：搜集整理资料。搜集图片、数据、视频等资料。<br>第二阶段：系统场景模型建立。确定展示系统模型，并利用3Dmax进行场景建模。<br>第三阶段：系统场景整合，功能完成。<br>第四阶段：成品发布。将系统打包成exe文件，并保存所有的项目资料。</p><p>设计VR功能：漫游（自动手动鸟瞰），局部查看，配置图</p><h4 id="5-游戏开发"><a href="#5-游戏开发" class="headerlink" title="5.游戏开发"></a>5.游戏开发</h4><p>游戏本质，阶段任务，游戏引擎，逻辑+数据，交互：7+2法则菲茨防错，格式塔，席克定律</p><h2 id="三、VR前沿"><a href="#三、VR前沿" class="headerlink" title="三、VR前沿"></a>三、VR前沿</h2><h4 id="1-3D打印"><a href="#1-3D打印" class="headerlink" title="1.3D打印"></a>1.3D打印</h4><p>3D打印技术概念：3D打印（英语：3D printing），即快速成形技术的一种，它是一种数字模型文件为基础，运用粉末状金属或塑料等可粘合材料，通过逐层打印的方式来构造物体的技术<br>原理：3D打印机将虚拟的数字化三维模型直接转变成了实体模型<br>应用：医疗行业、科学研究、产品模型、建筑设计</p><h4 id="2-AR"><a href="#2-AR" class="headerlink" title="2.AR"></a>2.AR</h4><p>增强现实技术是将虚拟世界直接叠加在人类感知的真实世界之上的一种技术。<br>VR强调的是虚拟世界给人的沉浸感，强调人能以自然方式与虚拟世界中的对象进行交互操作<br>AR则强调在真实场景中融入计算机生成的虚拟信息的能力，它并不隔断观察者与真实世界之间的联系。<br>AR具有较低的硬件要求、更高的注册精度、更具真实感</p><p>AR特征：<br>真实世界和虚拟世界融为一体。<br>具有人机交互功能。<br>真实世界和虚拟世界在三维空间上的整合。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;虚拟现实技术&quot;&gt;&lt;a href=&quot;#虚拟现实技术&quot; class=&quot;headerlink&quot; title=&quot;虚拟现实技术&quot;&gt;&lt;/a&gt;虚拟现实技术&lt;/h1&gt;&lt;h2 id=&quot;一、VR基本技术&quot;&gt;&lt;a href=&quot;#一、VR基本技术&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="就是学,猛猛学" scheme="https://tyisok.github.io/categories/%E5%B0%B1%E6%98%AF%E5%AD%A6-%E7%8C%9B%E7%8C%9B%E5%AD%A6/"/>
    
    
    <category term="就是学" scheme="https://tyisok.github.io/tags/%E5%B0%B1%E6%98%AF%E5%AD%A6/"/>
    
    <category term="猛猛学" scheme="https://tyisok.github.io/tags/%E7%8C%9B%E7%8C%9B%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>HFSS使用指南</title>
    <link href="https://tyisok.github.io/2022/01/15/hfss-shi-yong-zhi-nan/"/>
    <id>https://tyisok.github.io/2022/01/15/hfss-shi-yong-zhi-nan/</id>
    <published>2022-01-15T14:14:26.677Z</published>
    <updated>2022-04-14T00:52:14.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HFSS使用指南"><a href="#HFSS使用指南" class="headerlink" title="HFSS使用指南"></a>HFSS使用指南</h1><p>推荐博主<a href="https://blog.csdn.net/qq_41542947/category_10304443.html">https://blog.csdn.net/qq_41542947/category_10304443.html</a></p><p>软件界面介绍</p><p><a href="https://blog.csdn.net/qq_41542947/article/details/108063552">https://blog.csdn.net/qq_41542947/article/details/108063552</a></p><h2 id="一、初始设置"><a href="#一、初始设置" class="headerlink" title="一、初始设置"></a>一、初始设置</h2><p>1.创建工程：File–&gt;New，File–&gt;Save</p><p>2.点击工具栏<img src="/2022/01/15/hfss-shi-yong-zhi-nan/1.png" alt="1">，进入HFSS设计界面</p><p>3.设置模型计算模式：HFSS–&gt;Solution Type</p><p>4.基础设置，比如基本单位：Tools–&gt;Options–&gt;General Options–&gt;Default Units</p><h2 id="二、设计天线（微带）"><a href="#二、设计天线（微带）" class="headerlink" title="二、设计天线（微带）"></a>二、设计天线（微带）</h2><h3 id="1-添加变量："><a href="#1-添加变量：" class="headerlink" title="1.添加变量："></a>1.添加变量：</h3><p>HFSS–&gt;Design Properties(设计属性)，参照设计图，逐个变量添加（不要忘记单位），Add————</p><p>H=1.6mm，W0=37.26mm，W1=1.16mm，W2=2.98mm，L0=30.21mm，L1=17.45mm，L2=15mm</p><h3 id="2-进行图形绘制"><a href="#2-进行图形绘制" class="headerlink" title="2.进行图形绘制"></a>2.进行图形绘制</h3><p>2-1 画基板：工具栏找立方体（Draw box），单击后拖动画底，再单击拖动画高，随便画一个，参数一会设置。选择左侧第二栏，操作树中新出现的Box1（即刚绘制的），双击Box1，更改属性如下：</p><pre class=" language-html"><code class="language-html">Name:substrateMaterial:FR4_epoxy(需要选择Edit，然后搜索)Transparent:0.7</code></pre><p>设置基板大小（将一开始定义的变量赋给立方体）：双击CreateBox，设置(更改)如下属性：</p><pre class=" language-html"><code class="language-html">Position：-L0,-W0,0mm   #算出来的立方体绘制的起始位置XSize：1.5*L0+L1+L2YSize：2*W0ZSize：H</code></pre><p>确定后，按Ctrl+D，将图形恢复至中心位置（鼠标滚轮也可）</p><p>2-2 画辐射贴片</p><p>工具栏找矩形（Draw Rectangle），单击后拖动，再单击完成绘制</p><p>同上</p><p>更改属性如下：</p><pre class=" language-html"><code class="language-html">Name:patchMaterial:Globalcolor：最好金黄色(金属颜色)Transparent:0.7</code></pre><p>设置天线尺寸：双击CreateRectangle，设置(更改)如下属性：</p><pre class=" language-html"><code class="language-html">Position：-L0/2,-W0/2,HXSize：L0YSize：W0</code></pre><p>2-3 画传输线</p><p>工具栏找矩形（Draw Rectangle），单击后拖动，再单击完成绘制</p><p>同上</p><p>更改属性如下：</p><pre class=" language-html"><code class="language-html">Name:TLINEMaterial:Globalcolor：最好金黄色(金属颜色)Transparent:0.7</code></pre><p>设置天线尺寸：双击CreateRectangle，设置(更改)如下属性：</p><pre class=" language-html"><code class="language-html">Position：L0/2,-W1/2,HXSize：L1YSize：W1</code></pre><p>设置完可能没有在中间，是视角问题，Alt+鼠标左键</p><p>2-4 画第二根传输线</p><p>工具栏找矩形（Draw Rectangle），单击后拖动，再单击完成绘制</p><p>同上</p><p>更改属性如下：</p><pre class=" language-html"><code class="language-html">Name:50ohmMaterial:Globalcolor：最好金黄色(金属颜色)Transparent:0.7</code></pre><p>设置天线尺寸：双击CreateRectangle，设置(更改)如下属性：</p><pre class=" language-html"><code class="language-html">Position：L0/2+L1,-W2/2,HXSize：L2YSize：W2</code></pre><p>设置完可能没有在中间，是视角问题，Alt+鼠标左键</p><h3 id="3-合并绘制的天线"><a href="#3-合并绘制的天线" class="headerlink" title="3.合并绘制的天线"></a>3.合并绘制的天线</h3><p>按住Ctrl选中三个天线部分，选中后在工具栏找Unite，点击后完成合并</p><h3 id="4-设置绘制出的天线为理想电场导体（设置边界条件）"><a href="#4-设置绘制出的天线为理想电场导体（设置边界条件）" class="headerlink" title="4.设置绘制出的天线为理想电场导体（设置边界条件）"></a>4.设置绘制出的天线为理想电场导体（设置边界条件）</h3><p>在选中天线后，右键，选择Assign Boundary–&gt;Perfect E</p><h3 id="5-绘制空气腔（边界）"><a href="#5-绘制空气腔（边界）" class="headerlink" title="5.绘制空气腔（边界）"></a>5.绘制空气腔（边界）</h3><p>理论无限远也有电场，但软件算不出来，设个边界</p><p>工具栏找立方体（Draw box），单击后拖动画底，再单击拖动画高</p><p>更改属性如下：</p><pre class=" language-html"><code class="language-html">Name:airBoxMaterial:vacuumcolor：浅绿Transparent:0.8</code></pre><p>设置空气腔尺寸：双击CreateRectangle，设置(更改)如下属性：</p><pre class=" language-html"><code class="language-html">Position：-L0/2-30mm,-W0/2-30mm,0XSize：L0+L1+L2+30mmYSize：W0+60mmZSize：H+30mm</code></pre><p>设置完可能没有在中间，是视角问题，Alt+鼠标左键</p><h3 id="6-设置绘制出的空气腔为辐射边界（设置边界条件）"><a href="#6-设置绘制出的空气腔为辐射边界（设置边界条件）" class="headerlink" title="6.设置绘制出的空气腔为辐射边界（设置边界条件）"></a>6.设置绘制出的空气腔为辐射边界（设置边界条件）</h3><p>在选中airBox后，右键，选择Assign Boundary–&gt;Radiation，默认即可</p><p>按住滚轮旋转模型到底面，在基板上右键选择Select Faces，然后再右键底面设置为PerfectE</p><h3 id="7-增加一个端口"><a href="#7-增加一个端口" class="headerlink" title="7.增加一个端口"></a>7.增加一个端口</h3><p>电磁波要从端口传送进来</p><p>先选择工具栏中的Drawing plane(绘制平面)选项为YZ（原来是XY）。工具栏找矩形（Draw Rectangle），单击后拖动，再单击完成绘制</p><p>更改属性如下：</p><pre class=" language-html"><code class="language-html">Name:port1Material:Globalcolor：砖红（与其他颜色区分开即可）Transparent:0.5</code></pre><p>设置端口大小：双击CreateRectangle，设置(更改)如下属性：</p><pre class=" language-html"><code class="language-html">Position：L0/2+L1+L2,-4*W2,0mmYSize：8*W2ZSize：8*H</code></pre><p>右键画完的端口，选择Assign Excitation(分配端口激励)下的Wave Port（波形端口），前两步默认即可，第三步Port Renormalization（端口重新规范化）选Renormalize All Modes设为50ohm</p><p>ohm：欧姆</p><p>建模到此完成</p><h2 id="三、分析"><a href="#三、分析" class="headerlink" title="三、分析"></a>三、分析</h2><p>回到最左侧工程目录处，选择Analysis，右键，选择Add Solution Setup（增加解析设置）。在General标签下，更改Solution Frequency（求解频率）为2.45GHz，更改Maximum Number of（最大迭代次数）为20；Maximum Delta S（收敛误差）为0.02</p><p>在新添加的Analysis下的Setup1上右键选择 Add Frequency Sweep（添加频率扫描）。在General标签下，更改Sweep Type ：Fast ，Start：1.5GHz，Stop：3.5GHz，Step Size：0.01GHz。点击Display，右侧会生成一串连续的数字，在后续分析中，会逐个频率求解，并将结果体现在曲线图中</p><p>选择工具栏一个绿色的对号，查看是否有未设置好的变量，有个警告是Boundaries and  Excitations，是指基板和空气腔PerfectE重合了，计算时会默认忽略一个，所以不必处理。注意区分警告与报错，警告不一定会影响结果，但是报错注定算不出来。</p><p>选择对号旁边的叹号，开始分析</p><h2 id="四、查看分析结果"><a href="#四、查看分析结果" class="headerlink" title="四、查看分析结果"></a>四、查看分析结果</h2><p>回到最左侧工程目录处，选择Results，右键，选择Create Modal Solution Data Report（创建模式解决方案数据报表）——&gt;Rectangular Stacked Plot(直角坐标系)—–&gt;Trace(轨迹)</p><p>Category（种类）：S Parameter</p><p>Function（函数）：dB</p><p>选择New Report</p><p>观察，在图像的线上右键，选择Marker——&gt;Add Marker，在最低点做标记，观察图像左上角数值dB=-18,因为我们设定的天线的工作频率为2.45GHz，在2.45GHz处做个标记，值为-0.几，因此发生偏移，偏移至了2.15GHz，因此需要优化</p><h2 id="五、优化L0"><a href="#五、优化L0" class="headerlink" title="五、优化L0"></a>五、优化L0</h2><p>回到最左侧工程目录处，选择Optimetrics，右键，选择Add—&gt;Parametric(参数)，在Sweep Definitions标签下，选择Add，选择Variable值为L0（因为天线工作频率跟天线长度L0有关）</p><p>Start：27mm</p><p>Stop：30mm</p><p>Step：1mm</p><p>点击中间的Add，然后OK</p><p>选择刚创建的优化参数ParametricSetup1，右键选择分析Analyze</p><p>分析结束后，再次生成新的坐标图</p><p>回到最左侧工程目录处，选择Results，右键，选择Create Modal Solution Data Report（创建模式解决方案数据报表）——&gt;Rectangular Stacked Plot(直角坐标系)—–&gt;Families，选择将刚才测试出的L0，点击Edit列中的 … 发现优化时设置的值全部出现，此时再添加报表，会将L0这几个值对应的曲线都体现在同一个图像中</p><p>找到极值点离2.45GHz最近的曲线，单击它，图像右上角观察发现是L0=28mm对应的曲线，因此28mm的天线尺寸才是最接近我们设计目标的，接下来更正原L0的值</p><h2 id="六、修改原值"><a href="#六、修改原值" class="headerlink" title="六、修改原值"></a>六、修改原值</h2><p>在菜单栏，HFSS–&gt;Design Properties，将L0值改为28mm，点击确定</p><h2 id="七、优化W1"><a href="#七、优化W1" class="headerlink" title="七、优化W1"></a>七、优化W1</h2><p>回到最左侧工程目录处，选择Optimetrics，右键，选择Add—&gt;Parametric(参数)，在Sweep Definitions标签下，选择Add，选择Variable值为W1（因为天线工作频率还跟1/4波长阻抗转换器的宽度W1有关，宽度不同阻抗不同）</p><p>Start:0.9mm</p><p>Stop:1.4mm</p><p>Step:0.1mm</p><p>点击中间的Add，然后OK</p><p>选择刚创建的优化参数ParametricSetup2，右键选择分析Analyze</p><p>分析结束后，再次生成新的坐标图</p><p>回到最左侧工程目录处，选择Results，右键，选择Create Modal Solution Data Report（创建模式解决方案数据报表）——&gt;Rectangular Stacked Plot(直角坐标系)—–&gt;Families，选择将刚才测试出的W1 ，点击Edit列中的 … 发现优化时设置的值全部出现，此时再添加报表，会将W1这几个值对应的曲线都体现在同一个图像中,因为只测试W1，所以需要控制L0为28mm（刚测出来的），观察图像，因为S(1,1)系数越小越好，所以选中最低点那条线，(看不出来可以用滚轮放大)，发现是W1=1mm时，要比所有值都小，因此此时最为合适</p><h2 id="八、修改原值"><a href="#八、修改原值" class="headerlink" title="八、修改原值"></a>八、修改原值</h2><p>在菜单栏，HFSS–&gt;Design Properties，将W1值改为1mm，点击确定</p><h2 id="九、再次以相同频率分析"><a href="#九、再次以相同频率分析" class="headerlink" title="九、再次以相同频率分析"></a>九、再次以相同频率分析</h2><p>回到最左侧工程目录处，选择Analysis在新添加的Analysis下的Setup1上右键，选择Analyze</p><h2 id="十、生成最终直角坐标系图像"><a href="#十、生成最终直角坐标系图像" class="headerlink" title="十、生成最终直角坐标系图像"></a>十、生成最终直角坐标系图像</h2><p>回到最左侧工程目录处，选择Results，右键，选择Create Modal Solution Data Report（创建模式解决方案数据报表）——&gt;Rectangular Stacked Plot(直角坐标系)—–&gt;Families，将W1，L0设置为刚才测试好的最优解 ，此时再添加报表，图像上只有一条曲线</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;HFSS使用指南&quot;&gt;&lt;a href=&quot;#HFSS使用指南&quot; class=&quot;headerlink&quot; title=&quot;HFSS使用指南&quot;&gt;&lt;/a&gt;HFSS使用指南&lt;/h1&gt;&lt;p&gt;推荐博主&lt;a href=&quot;https://blog.csdn.net/qq_41542947</summary>
      
    
    
    
    <category term="学习工具" scheme="https://tyisok.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="HFSS" scheme="https://tyisok.github.io/tags/HFSS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://tyisok.github.io/2022/01/15/hello-world/"/>
    <id>https://tyisok.github.io/2022/01/15/hello-world/</id>
    <published>2022-01-15T14:14:26.651Z</published>
    <updated>2021-05-18T13:59:39.272Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>软件工程复习</title>
    <link href="https://tyisok.github.io/2021/05/20/ruan-jian-gong-cheng-fu-xi/"/>
    <id>https://tyisok.github.io/2021/05/20/ruan-jian-gong-cheng-fu-xi/</id>
    <published>2021-05-20T12:54:45.000Z</published>
    <updated>2021-05-24T08:05:30.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-软件工程学概述"><a href="#第一章-软件工程学概述" class="headerlink" title="第一章 软件工程学概述"></a>第一章 软件工程学概述</h1><h2 id="1-1-软件危机"><a href="#1-1-软件危机" class="headerlink" title="1.1 软件危机"></a>1.1 软件危机</h2><p><strong>基本概念：</strong>在计算机软件的开发和维护过程中所遇到的一系列严重问题。</p><p><strong>软件危机的典型表现</strong>：</p><p>1、对软件开发成本和进度的估计常常很不准确<br>2、用户对“已完成的”软件系统不满意的现象经常发生<br>3、软件产品的质量往往靠不住<br>4、软件常常是不可维护的<br>5、软件通常没有适当的文档资料<br>6、软件成本在计算机系统总成本中所占的比例逐年上升<br>7、软件开发生产率提高的速度，远远跟不上计算机应用迅速普及深入的趋势</p><h2 id="1-2-软件工程"><a href="#1-2-软件工程" class="headerlink" title="1.2 软件工程"></a>1.2 软件工程</h2><p><strong>软件工程概述</strong>：软件工程是指导计算机软件开发和维护的一门工程学科。</p><p><strong>软件工程方法学</strong>：</p><p>1、传统方法学<br>2、面向对象方法学</p><h2 id="1-3-软件生命周期"><a href="#1-3-软件生命周期" class="headerlink" title="1.3 软件生命周期"></a>1.3 软件生命周期</h2><p><strong>基本概念：</strong>由软件定义、软件开发和运行维护(也称为软件维护)3个时期组成，每个时期又进一步划分成若干个阶段。</p><p><strong>三个时期（七个阶段）：</strong></p><pre class="mermaid">graph LRA[软件开发时期]-->B[软件定义]A-->C[软件开发]A-->D[软件维护]B-->F[问题定义]-->1[解决什么问题]B-->E[可行性研究]-->2[对于上一个阶段的问题有什么可行方法吗]B-->G[需求分析]-->3[为了解决这个问题,目标系统必须做什么]C-->H[总体设计]-->4[概括地说应该事先怎样的目标系统]C-->I[详细设计]-->5[应该怎样具体地实现这个系统呢]C-->J[编码和单元测试]-->6[写出正确的容易理解容易维护的程序模块]C-->K[综合测试]-->7[通过各种类型的测试使软件达到预定的要求]D-->8[通过各种必要的维护活动使系统持久地满足需要用户的]</pre><h2 id="1-4-软件过程"><a href="#1-4-软件过程" class="headerlink" title="1.4 软件过程"></a>1.4 软件过程</h2><p><strong>基本概念：</strong>软件过程是为了获得高质量软件所需要完成的一系列任务的框架，它规定了完成各项任务的工作步骤。</p><p><strong>几个模型：</strong></p><pre class="mermaid">graph LRA[软件过程模型]-->1[瀑布模型]A-->2[快速原型模型]A-->3[增量模型]A-->4[螺旋模型]A-->5[喷泉模型]1-->Y1[优点]1-->Q1[缺点]2-->Y2[优点]2-->Q2[缺点]3-->Y3[优点]3-->Q3[缺点]4-->Y4[优点]4-->Q4[缺点]5-->Y5[优点]5-->Q5[缺点]Y1-->11[可强迫开发人员采用规范的方法]Y1-->12[严格地规定了每个阶段必须提交的文档]Y1-->13[要求每个阶段交出的所有产品都必须经过质量保证小组的仔细验证]Q1-->14[传统的瀑布模型过于理想化,工作过程中不可能不犯错误]Y2-->21[快速原型模型是不带反馈环的]Y3-->31[能在较短时间内向用户提交可完成部分工作的产品]Y3-->32[使用户有较充裕的时间适应新产品,减少一个全新的软件的冲击]Q3-->33[增量构件集成时,不破坏原来已经开发出的产品]Q3-->34[软件体系结构必须是开放的]Y4-->41[对可选方案和约束条件的强调有利于已有软件的重用,也有助于把软件质量作为软件开发的一个重要目标]Y4-->42[减少了过多测试或测试不足所带来的]Y4-->43[使用原型及其他方法来尽量降低风险]Y4-->44[使用原型及其他方法来尽量降低风险]</pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;第一章-软件工程学概述&quot;&gt;&lt;a href=&quot;#第一章-软件工程学概述&quot; class=&quot;headerlink&quot; title=&quot;第一章 软件工程学概述&quot;&gt;&lt;/a&gt;第一章 软件工程学概述&lt;/h1&gt;&lt;h2 id=&quot;1-1-软件危机&quot;&gt;&lt;a href=&quot;#1-1-软件危机&quot;</summary>
      
    
    
    
    <category term="Personal_use" scheme="https://tyisok.github.io/categories/Personal-use/"/>
    
    
    <category term="就是学" scheme="https://tyisok.github.io/tags/%E5%B0%B1%E6%98%AF%E5%AD%A6/"/>
    
    <category term="猛猛学" scheme="https://tyisok.github.io/tags/%E7%8C%9B%E7%8C%9B%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>高效学习必备工具集</title>
    <link href="https://tyisok.github.io/2021/05/19/gao-xiao-xue-xi-bi-bei-gong-ju-ji/"/>
    <id>https://tyisok.github.io/2021/05/19/gao-xiao-xue-xi-bi-bei-gong-ju-ji/</id>
    <published>2021-05-19T13:15:00.000Z</published>
    <updated>2021-05-20T13:36:50.166Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线上学习网站"><a href="#线上学习网站" class="headerlink" title="线上学习网站"></a>线上学习网站</h3><p>以下网站均可在浏览器中打开</p><ol><li><a href="http://passport2.chaoxing.com/login?fid=&refer=http://i.mooc.chaoxing.com">学习通</a></li><li><a href="https://passport.zhihuishu.com/login?service=https://onlineservice.zhihuishu.com/login/gologin">智慧树在线教育_全球大型的学分课程运营服务平台（知到）</a></li><li><a href="https://www.yuketang.cn/v2/web/index">雨课堂</a></li><li>……</li><li>欢迎您的补充</li></ol><h3 id="高效学习工具分享"><a href="#高效学习工具分享" class="headerlink" title="高效学习工具分享"></a>高效学习工具分享</h3><h4 id="1-脚本类"><a href="#1-脚本类" class="headerlink" title="1 脚本类"></a>1 脚本类</h4><p><a href="https://www.tampermonkey.net/?ext=dhdg&locale=zh">油猴</a>：脚本管理工具（脚本：实现对页面的自动化控制）</p><p>Greasy Fork:<a href="https://greasyfork.org/zh-CN/scripts">开源用户脚本发布网站</a></p><p>用户脚本是一段代码，它们能够优化您的网页浏览体验。安装之后，有些脚本能为网站添加新的功能，有些能使网站的界面更加易用，有些则能隐藏网站上烦人的部分内容。在 Greasy Fork 上的用户脚本都是由用户编写并向全世界发表的，您可以免费安装，轻松体验。</p><p>按取所需，比如打开<a href="https://greasyfork.org/zh-CN/scripts/424383-%E8%B6%85%E6%98%9F%E5%AD%A6%E4%B9%A0%E9%80%9A%E7%BD%91%E8%AF%BE%E5%8A%A9%E6%89%8B-%E6%94%B9-%E6%94%AF%E6%8C%81%E5%9B%BE%E7%89%87%E9%A2%98">超星学习通网课助手(改)(支持图片题)</a>选择安装此脚本即可完成安装。简单阅读一下源代码部分，并对其中某些必要参数进行修改</p><p>打开对应的处理网站进行测试，成功则当前脚本有效，若无效，更换下一个直到成功执行相关功能即为完成</p><h4 id="2-插件类"><a href="#2-插件类" class="headerlink" title="2 插件类"></a>2 插件类</h4><p>特定工具，完成特定工作，辅助浏览器干活的工具。</p><p><a href="https://chrome.zzzmh.cn/index#ext">极简插件</a>：一个集合各种插件的网站</p><p>比如视频倍速插件Video Speed Controller</p><p><a href="https://zhaoolee.com/ChromeAppHeroes/page/005_video_speed_controller.html">Video Speed Controller 刷课（刷剧）神器！给网页视频加个速(最快可达16倍!)</a></p><p>可在极简插件那个网站中浏览并获取，具体如何安装查看网站教程，或者自行百度 “xx浏览器如何添加插件”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;线上学习网站&quot;&gt;&lt;a href=&quot;#线上学习网站&quot; class=&quot;headerlink&quot; title=&quot;线上学习网站&quot;&gt;&lt;/a&gt;线上学习网站&lt;/h3&gt;&lt;p&gt;以下网站均可在浏览器中打开&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://passport2.c</summary>
      
    
    
    
    <category term="学习工具" scheme="https://tyisok.github.io/categories/%E5%AD%A6%E4%B9%A0%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="Learn" scheme="https://tyisok.github.io/tags/Learn/"/>
    
    <category term="Tools" scheme="https://tyisok.github.io/tags/Tools/"/>
    
  </entry>
  
  <entry>
    <title>前(VUE)后端(django)框架入门</title>
    <link href="https://tyisok.github.io/2021/05/19/qian-hou-duan-kuang-jia-ru-men/"/>
    <id>https://tyisok.github.io/2021/05/19/qian-hou-duan-kuang-jia-ru-men/</id>
    <published>2021-05-18T17:40:00.000Z</published>
    <updated>2022-04-10T11:20:57.669Z</updated>
    
    <content type="html"><![CDATA[<p>技术交流群：932694278</p><blockquote><p>储备知识：Python，HTML，CSS，JavaScript等计算机基础知识</p><p>web框架： 别人已经设定好的一个web网站模板，你学习它的规则，然后“填空”或“修改”成你自己需要的样子。</p></blockquote><h2 id="0-开始前的准备–环境检查及工具的下载"><a href="#0-开始前的准备–环境检查及工具的下载" class="headerlink" title="0 开始前的准备–环境检查及工具的下载"></a>0 开始前的准备–环境检查及工具的下载</h2><h3 id="0-1环境的检查-——-python-amp-pip"><a href="#0-1环境的检查-——-python-amp-pip" class="headerlink" title="0-1环境的检查  —— python&amp;pip"></a>0-1环境的检查  —— python&amp;pip</h3><p>报不是内部命令的错误时，自己检查环境变量的配置，下面以python和pip为例</p><p>检查python是否安装成功，是否配置过环境变量，命令行运行如下命令</p><pre class=" language-cmd"><code class="language-cmd">python -V      pip list</code></pre><p>第一条出现一行python版本就算成功</p><p>第二条出现一堆包的名字就算成功</p><p>python不是内部命令解决方案<a href="https://zhuanlan.zhihu.com/p/263000046">https://zhuanlan.zhihu.com/p/263000046</a></p><p>其余问题自行百度，时刻牢记我们是面向百度编程小能手</p><h3 id="0-2工具的下载"><a href="#0-2工具的下载" class="headerlink" title="0-2工具的下载"></a>0-2工具的下载</h3><p>文中出现的所有工具，工具包都有</p><p>除专业版外，其余均可自行到官网下载</p><p>工具包地址（未更新）：<br>链接：<a href="https://pan.quark.cn/s/fb988374b279">https://pan.quark.cn/s/fb988374b279</a><br>提取码：p1Am</p><h3 id="0-3文档的使用"><a href="#0-3文档的使用" class="headerlink" title="0-3文档的使用"></a>0-3文档的使用</h3><p>使用文档的过程中不知道是代码还是命令时，如果是在博客中则是黑框右上角，如果是打开的Markdown文档则是点击后在右下角，如cmd则是在cmd中输入命令，如python则是Python代码，需要在对应的位置进行代码的修改。</p><h2 id="第一部分：Python-Web-框架——django"><a href="#第一部分：Python-Web-框架——django" class="headerlink" title="第一部分：Python Web 框架——django"></a>第一部分：Python Web 框架——django</h2><blockquote><p>Django是高水准的Python编程语言驱动的一个开源模型．视图，控制器风格的Web应用程序框架，它起源于开源社区。使用这种架构，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。这也正是OpenStack的Horizon组件采用这种架构进行设计的主要原因。另外，在Django框架中，还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性。</p><p>Django将MVC中的视图进一步分解为 Django视图 和 Django模板两个部分，分别决定 “展现哪些数据” 和 “如何展现”，使得Django的模板可以根据需要随时替换，而不仅仅限制于内置的模板。框架把控制层给封装了，无非与数据交互这层都是数据库表的读,写,删除,更新的操作。在写程序的时候，只要调用相应的方法就行了</p><p><a href="https://zhuanlan.zhihu.com/p/27717315">https://zhuanlan.zhihu.com/p/27717315</a> 简单理解什么是MVC</p></blockquote><h3 id="一、django及其附属工具安装"><a href="#一、django及其附属工具安装" class="headerlink" title="一、django及其附属工具安装"></a>一、django及其附属工具安装</h3><p>1- 安装<code>django</code>开发环境及其依赖（python3.7+django2.2）——————pip命令安装</p><p>windows使用命令行提示符，mac使用终端</p><pre class=" language-cmd"><code class="language-cmd"># 安装django————————————django框架的核心模块pip install -i https://pypi.tuna.tsinghua.edu.cn/simple   django==2.2 # 安装pymysql———————————python来操作mysql数据库的模块pip install -i https://pypi.tuna.tsinghua.edu.cn/simple   pymysql # 安装restframework  markdown django-filter依赖:pip install -i https://pypi.tuna.tsinghua.edu.cn/simple   djangorestframework markdown Django-filter # 安装跨域支持   pip  install  -i https://pypi.tuna.tsinghua.edu.cn/simple   Django-cors-headers </code></pre><blockquote><p>版本最好保持一致，追求刺激可以自选版本</p><p>多个python版本注意修改环境变量</p><p>安装后续django依赖模块时，会自动更新到适合的版本，如果另后续出现问题可自行百度</p></blockquote><p>2- 安装<code>pycharm</code>————也可以安装别的能看python代码的软件</p><p>安装pycharm方式二选一：工具包&amp;官网</p><blockquote><p>工具包对应文件：pycharm文件夹中的 <code>pycharm-community-2019.3.exe</code></p><p>官网：<a href="https://www.jetbrains.com/pycharm/">https://www.jetbrains.com/pycharm/</a>         </p></blockquote><p>pycharm只是一个看代码的工具，专业版需要使用科技手段，有条件请支持正版，没条件社区版同样够用</p><p>建议安装notepad++用来看代码，工具包中文件名     <code>npp.7.8.8.Installer.x64.exe</code></p><p>3-安装<code>mysql</code>数据库及其可视化工具</p><p>3-1 mysql服务的安装</p><p><a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p>下载并安装mysql5.7.31——工具包内有，注意版本保持一致</p><p>安装教程：<a href="https://blog.csdn.net/zixiao_love/article/details/100118585">https://blog.csdn.net/zixiao_love/article/details/100118585</a></p><blockquote><p>注：在设置密码时一定要谨慎，不想找trouble，就直接123456</p></blockquote><p>3-2 安装数据库客户端<code>Navicat Premium 15</code>，需科技手段</p><p>安装教程：<a href="https://cloud.tencent.com/developer/article/1804255">https://cloud.tencent.com/developer/article/1804255</a></p><p>一定要注意在安装完软件本体后，不要打开软件，要打开注册机，然后再照着教程操作</p><p>注册完成后，在左上角找到帮助，选择帮助选项中的关于，看是否注册成功</p><p>3-3 检查<code>pymysql</code>——cmd黑窗口中操作<br>这是python来操作mysql数据库的</p><p>4- 开发接口测试 <code>Postman</code>————可选，教程中用的少，用来测试接口传输的数据<br>    下载：<a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a></p><p>到这里django需要的环境基本配置完成，我们可以测试一下是否完全成功</p><p>5-测试django是否合格</p><p>5-1 在某个你喜欢的盘你喜欢的位置创建一个英文目录（也就是创建一个文件夹名）叫Test，并在cmd中进入当前的路径，创建一个工程项目Test_django</p><pre class=" language-cmd"><code class="language-cmd">django-admin startproject Test_django</code></pre><p>这里进入当前目录可以选择直接在当前目录的 地址栏 输入  cmd  ，然后回车即可打开当前目录的cmd</p><p>或者在常规打开命令行后使用    cd  完整路径     ，进入对应目录</p><p>5-2 更改时区和语言</p><p> 在 <strong>Test_django</strong>的<code>settings.py</code>找到下面的两个变量，并修改对应值</p><p>打开方式推荐右键选择打开方式为notepad++，快</p><p>  下面是两者任选一个，根据你的操作系统而定</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># window系统</span>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># mac系统</span>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh_Hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span></code></pre><p>5-3 在命令行中，进入工程目录Test_django，启动WEB服务</p><pre class=" language-cmd"><code class="language-cmd"># 是一行一行输入# 一定要先进到文件夹里再输入、# 提示找不到对应文件时检查目录cd Test_djangopython manage.py runserver</code></pre><p>显示如下内容表示服务启动成功</p><pre class=" language-cmd"><code class="language-cmd">....Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C.</code></pre><p>5-4 浏览器测试<br>   打开一个浏览器，在地址框里录入:<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a><br>    可以打开一个python Django的网页说明配置成功</p><h3 id="二、django工程开发流程"><a href="#二、django工程开发流程" class="headerlink" title="二、django工程开发流程"></a>二、django工程开发流程</h3><p><strong>0 在合适的位置创建新文件夹django_stu,并使用pycharm打开此文件夹</strong>————如果设置虚拟环境，需要提前配置好虚拟环境的Python编译器</p><p><strong>1 创建一个名为<em>StudSys</em>工程项目</strong><br>   在pycharm左下角Terminal工具 执行下面的指令：</p><pre class=" language-cmd"><code class="language-cmd">django-admin  startproject  StudSys</code></pre><p>  【命令说明】创建的工程project，下面会自动创建一个与工程名相同的文件夹以及一个manage.py文件</p><blockquote><p><strong>文件目录结构介绍：</strong><br>manage.py：用于管理项目的脚本文件，需要通过python命令执行，在cmd中执行如下格式命令</p><pre class=" language-cmd"><code class="language-cmd">python manage.py [子命令,如help等]</code></pre><p>可以通过<code>python manage.py help</code>看下其它指令功能，一般情况下不应该编辑这个文件。</p><p>与工程名相同的文件夹下：</p><p>settings.py：所有和项目相关的配置都是放在这个里面，很重要</p><p>urls.py：配置URL路由的文件。</p><p>wsgi.py：项目与WSGI协议兼容的web服务器入口，部署的时候需要用到的</p></blockquote><p><strong>2 创建一个APP，如<em>SchoolApp</em></strong><br>在Terminal工具（命令行）工具继续执行</p><pre class=" language-cmd"><code class="language-cmd">cd StudSys </code></pre><p>进入刚创建的工程目录内，执行：</p><pre class=" language-cmd"><code class="language-cmd">python manage.py  startapp  SchoolApp</code></pre><blockquote><p><strong>app是django项目的组成部分。</strong><br>一个app代表项目中的一个模块，所有URL（统一资源定位符）请求的响应都是由app来处理。<br>比如豆瓣，里面有图书，电影，音乐，同城等许许多多的模块，<br>从django的角度来看，图书，电影这些模块就是app，<br>图书，电影这些app共同组成豆瓣这个项目。<br>因此django项目由许多app组成，一个app可以被用到其他项目，django也能拥有不同的app</p><p>Django 采用了 MVT 的软件设计模式，即模型（Model），视图（View）和模板（Template）</p></blockquote><blockquote><p><strong>app文件夹里都有什么：</strong><br>   amdin.py: 该应用后台管理系统配置<br>   tests.py: 自动化测试模块  在这里编写测试脚本<br>   apps.py: 自动生成<br>   models.py: 数据模块——-常用模块*<br>   views.py: 视图模块  代码逻辑处理主要地点——-常用模块*</p></blockquote><p>**3 添加新的==APP==**（激活应用）<br>  在 <strong>StudSys</strong>的<code>settings.py</code><br>  找到 <em>INSTALLED_APP</em> 添加 app名称，即 <code>&#39;SchoolApp&#39;</code></p><p><strong>4 添加==rest framework==支持</strong><br>  在 <strong>StudSys</strong>的<code>settings.py</code><br>  找到 <em>INSTALLED_APP</em> 添加<code>&#39;rest_framework&#39;</code></p><p><strong>5 更改时区和语言</strong><br>  在 <strong>StudSys</strong>的<code>settings.py</code>覆盖掉下面的两个变量值<br>  下面是两者任选一个，根据你的操作系统而定</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># window系统</span>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># mac系统</span>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh_Hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span></code></pre><p><strong>6 启动WEB服务</strong></p><pre class=" language-cmd"><code class="language-cmd">python manage.py runserver</code></pre><p>显示如下内容表示服务启动成功</p><pre class=" language-cmd"><code class="language-cmd">....Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C.</code></pre><p><strong>7 测试</strong><br>   打开一个浏览器，在地址框里录入:<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a><br>    可以找开一个python Django的网页说明配置成功</p><p><strong>8 开发APIVIEW 接口:第一个服务接口</strong><br>  打开新创建的app文件夹<code>SchoolApp</code>中的<code>views.py</code>文件，将以下代码粘贴</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">class</span> <span class="token class-name">firstAPIVIEW</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 下面这两项可以让请求不用携带token值</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span></code></pre><p><strong>9 配置URL路由</strong><br>  打开工程文件夹下的 <code>urls.py</code><br>  1.导入 APP中的视图模块 ，注意导入模块是默认没有展开的，<strong>粘贴时不要错把导入模块覆盖了</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> SchoolApp<span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span></code></pre><p>  2.配置路由，本次完全覆盖此列表，之后每次新加入都是添加新的列表项</p><pre class=" language-python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span>firstAPIVIEW<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"firstTest"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>  【注】first就是一个别名，他可以帮我们找到firstAPIVIEW里面的函数</p><blockquote><p>  URL是Uniform Resource Locator的简写，统一资源定位符。<br>  一个URL由以下几部分组成：<br>  scheme://host:port/path/?query-string=xxx#anchor<br>  scheme：代表的是访问的协议，一般为http或者https以及ftp等。<br>  host：主机名，域名，比如<a href="http://www.baidu.com./">www.baidu.com。</a><br>  port：端口号。当你访问一个网站的时候，浏览器默认使用80端口。<br>  path：查找路径。比如：<a href="http://www.jianshu.com/trending/now%EF%BC%8C%E5%90%8E%E9%9D%A2%E7%9A%84trending/now%E5%B0%B1%E6%98%AFpath%E3%80%82">www.jianshu.com/trending/now，后面的trending/now就是path。</a><br>  query-string：查询字符串，比如：<a href="http://www.baidu.com/s?wd=python%EF%BC%8C%E5%90%8E%E9%9D%A2%E7%9A%84wd=python%E5%B0%B1%E6%98%AF%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82">www.baidu.com/s?wd=python，后面的wd=python就是查询字符串。</a><br>  anchor：锚点，后台一般不用管，前端用来做页面定位的。<br>  注意：URL中的所有字符都是ASCII字符集，如果出现非ASCII字符，<br>  比如中文，浏览器会进行编码再进行传输。</p></blockquote><p>【注】这里，如果大家是手动创建的django项目，而不是使用专业版pycharm自动生成的项目，pycharm会不识别不同文件引用，因此会提示找不到SchoolApp文件夹，只需要在当前django项目最外层的文件夹上右键，选择Mark Directory as  ——&gt;Sources Root   ，这样操作的目的就是让pycharm将当前大文件夹作为一个项目去使用</p><p>解释：虚拟环境原理，不同文件夹不会互相干扰</p><p><strong>10 打开Postman 测试接口</strong><br>      如果没有安装可以使用浏览器测试<br>      <a href="http://127.0.0.1:8000/first">http://127.0.0.1:8000/first</a><br>      如果得到helloworld输出证明已经测试通过</p><p>你的第一个网络服务接口  通过测试   可以继续</p><p>这里后续修改配置时，不要让django持续运行，停止运行后再修改</p><p><strong>11 配置数据库  <code>setting.py</code></strong><br>     ==DATABASES==<br>   　默认为sqlite3，更改为mysql时，需注意版本，<br>     如果为Django2.1版本以上，mysql版本必须为5.6以上<br>例：</p><pre class=" language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'studdb'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">##数据库名</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">##登陆名</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">##登陆密码</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">##地址</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span> <span class="token string">'3306'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">##端口号</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里其实可以让django同时使用多个数据库，不过在数据迁移的时候需要指定要迁移到哪个库</p><p>具体操作大家可以自行百度，因为目前阶段我们涉及不到那么高深的知识，为了避免混淆，推荐大家直接覆盖掉默认的数据库即可</p><p><strong>12 创建数据库</strong><br><code>记得启动 mysql服务</code><br>    打开mysql客户端，创建相应的数据库( 名必须是上面配置中的名一致)，字符集选utf8mb4</p><p>这里大家需要区分数据库名和连接名</p><p>Navicat在连接mysql的时候起的名字叫连接名，大家可以把他当做是对数据线起名，是随意的</p><p>而在我们点开连接在msql中创建数据库时，那个数据库名才是Django需要的，因此大家起的名字要跟你在Django中声明的数据库名字一致</p><p><strong>13  执行数据更新命令</strong><br>       执行数据库迁移</p><pre class=" language-cmd"><code class="language-cmd">python manage.py makemigrationspython manage.py migrate</code></pre><p>发现已经自动为我们创建了一些django的表</p><p>解释：</p><p>makemigrations表示Django会先把发生变化的数据列个清单，在这一步时，如果我们是刚创建的项目，还没有自建模型时，他会提示没有发生变化的数据，是正常现象。但是，因为Django自身在创建时有些数据模型就已经建好了，只是因为没有改变所以他没有算在变化的数据里</p><p>而第二步migrate，会把上述数据库没有的数据进行迁移，所以在建立之初第一次数据迁移时数据库会新增很多表。在后续我们创建自己的模型再迁移时，只会再增加我们自己的表</p><p>注：</p><p>如果在迁移的时候报了mysql版本问题，<br>或是报<code>Did you install mysqlclient?</code>错误<br>需要在与<code>setting.py</code>同目录的<code>__init__.py</code>中添加</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>version_info <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"final"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>pymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>这里还可能会报<code>AttributeError: ‘str‘ object has no attribute &#39;decode‘</code></p><p>到报错的位置将decode（）改为encode（）</p><p><strong>14 在<code>[app名称]/models.py</code>中添加表的model</strong><br>      注意：每次添加新model后，执行13代码</p><ol><li>添加model</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token keyword">class</span> <span class="token class-name">firstModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>                            default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                            verbose_name<span class="token operator">=</span><span class="token string">"第一个数据模型"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        verbose_name <span class="token operator">=</span> <span class="token string">'第一个模型'</span>        verbose_name_plural <span class="token operator">=</span> verbose_name    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name</code></pre><ol start="2"><li>再次- 执行3-8-13 更新代码</li></ol><pre class=" language-cmd"><code class="language-cmd">python manage.py makemigrationspython manage.py migrate</code></pre><p>这里执行完后，可以检查一下看看是否已经自动为我们创建了表</p><p><strong>15 再次-修改APIVIEW 接口</strong><br>导入模型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> firstModel<span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        _data<span class="token operator">=</span>firstModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>16 再次-打开Postman 测试接口</strong><br>1)一般会得到空值的提示，list out of range，因为还没有向表里写数据</p><p>#方法1：在表里直接写数据———暂用更直接的方式</p><p>#方法2：通过admin.py添加数据（相对复杂，可后期自学）</p><p><a href="https://blog.csdn.net/weixin_45819880/article/details/104037692">https://blog.csdn.net/weixin_45819880/article/details/104037692</a></p><ol start="2"><li>再测试：报未序列化错误<br>return Response(_data[0].name)</li></ol><p><strong>17 模型序列化</strong><br>1)在app文件夹中创建一个serializers.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> firstModel<span class="token keyword">class</span> <span class="token class-name">firstModelSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model<span class="token operator">=</span>firstModel        fields<span class="token operator">=</span><span class="token string">"__all__"</span></code></pre><p>2)打开views.py  引入序列化器</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> firstModelSerializer        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        _data<span class="token operator">=</span>firstModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>           _data_serializer<span class="token operator">=</span>firstModelSerializer<span class="token punctuation">(</span>_data<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>_data_serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre><p>正常是可以看到json格式的数据</p><h3 id="三、小练习"><a href="#三、小练习" class="headerlink" title="三、小练习"></a>三、小练习</h3><p>创建<code>students</code>APP</p><p>创建模型<code>Student</code>，包括name,sex,age,class_null,description等属性，表名为tb_student</p><p>创建视图<code>StudentAPIView</code></p><p>在网页中能够看到json数据</p><h4 id="参考答案："><a href="#参考答案：" class="headerlink" title="参考答案："></a>参考答案：</h4><p>创建一个新的app：<code>students</code>，并添加在主配置文件</p><pre class=" language-cmd"><code class="language-cmd">python manage.py  startapp  students</code></pre><p>创建模型Student</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建模型Student</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"姓名"</span><span class="token punctuation">)</span>    sex <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"性别"</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">"年龄"</span><span class="token punctuation">)</span>    class_null <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"班级编号"</span><span class="token punctuation">)</span>   description <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"个性签名"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table <span class="token operator">=</span> <span class="token string">"tb_student"</span>        verbose_name <span class="token operator">=</span> <span class="token string">"学生"</span>        verbose_name_plural <span class="token operator">=</span> verbose_name</code></pre><p>执行数据迁移</p><pre class=" language-cmd"><code class="language-cmd">python manage.py makemigrationspython manage.py migrate</code></pre><p>创建序列化器类</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建序列化器类</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> firstModel<span class="token keyword">class</span> <span class="token class-name">StudentModelSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Student        fields <span class="token operator">=</span> <span class="token string">"__all__"</span><span class="token comment" spellcheck="true"># model 指明该序列化器处理的数据字段从模型类BookInfo参考生成</span><span class="token comment" spellcheck="true"># fields 指明该序列化器包含模型类中的哪些字段，'all’指明包含所有字段</span></code></pre><p>创建视图<code>StudentViewSet</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建视图StudentAPIView</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Student<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> StudentModelSerializer<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">class</span> <span class="token class-name">StudentAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        _data <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        _data_serializer <span class="token operator">=</span> StudentModelSerializer<span class="token punctuation">(</span>_data<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>_data_serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre><p>定义路由</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义路由</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> students<span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> SchoolApp<span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span>firstAPIVIEW<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"firstTest"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'stu/'</span><span class="token punctuation">,</span>StudentAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'student'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h2 id="第二部分：渐进式-JavaScript-框架——VUE"><a href="#第二部分：渐进式-JavaScript-框架——VUE" class="headerlink" title="第二部分：渐进式 JavaScript 框架——VUE"></a>第二部分：渐进式 JavaScript 框架——VUE</h2><h3 id="一、VUE及其附属工具安装"><a href="#一、VUE及其附属工具安装" class="headerlink" title="一、VUE及其附属工具安装"></a>一、VUE及其附属工具安装</h3><p>1-前置基础知识：Html标签知识、Css知识、javascript语法知识</p><p>2-Vue安装—前端工程</p><p>2-0 安装node.js</p><p><a href="http://nodejs.cn/download/">node.js下载地址</a></p><blockquote><p>提醒：</p><p>1 安装时推荐不要安装到C盘 ，但要记住安装在哪</p><p>2 nodejs安装路径下，新建node_global和node_cache两个文件夹</p><p>3 设置缓存文件夹    </p><pre class=" language-cmd"><code class="language-cmd">npm config set cache "完整安装路径\node_cache"</code></pre><p>4 设置全局模块存放路径 </p><pre class=" language-cmd"><code class="language-cmd">npm config set prefix "完整安装路径\node_global"</code></pre><p>5 设置环境变量 使得在任意目录下都可以使用cnpm、vue等命令，而不需要输入全路径<br>     修改 系统变量 PATH，添加新的全局路径 <code>完整路径\node_global</code><br>     新增 系统变量 NODE_PATH  <code>完整路径\node_modules</code></p></blockquote><p>2-1安装淘宝镜像————注意命令行权限</p><pre class=" language-cmd"><code class="language-cmd">npm install -g cnpm --registry=HTTPS://registry.npm.taobao.org</code></pre><p>2-2 安装<code>vue.js</code></p><pre class=" language-cmd"><code class="language-cmd">mac:   cnpm install -global vue-cliwin:   cnpm install vue-cli -g</code></pre><p>2-3安装<code>Visual Studio Code</code></p><p><a href="https://code.visualstudio.com/">vscode下载地址</a></p><blockquote><p>添加对vue支持的插件</p><p>Vetur、EsLint、Debugger for Chrome、<br> Auto Close Tag、Auto Rename Tag、JavaScript(ES6) code snippets、<br> Path Intellisense、HTML CSS Support、<br> Beautify、Bracket Pair Colorizer、open in browser</p></blockquote><p>3-测试是否安装成功<br>【创建并进入测试目录Test_Vue中】<br>3-1在命令行创建前端测试工程项目—testapp</p><pre class=" language-cmd"><code class="language-cmd"># 标准格式# vue init webpack [项目名]vue init webpack testapp</code></pre><p>3-2安装router—新的版本可能会提供自动提示安装（一路猛回车即可）</p><pre class=" language-cmd"><code class="language-cmd">cnpm i vue-router -D</code></pre><p>3-3 进入[项目名]文件夹————!!</p><pre class=" language-cmd"><code class="language-cmd">cd  testapp</code></pre><p>3-4 安装依赖</p><pre class=" language-cmd"><code class="language-cmd">cnpm install </code></pre><p>3-5 为项目安装网络请求axios</p><pre class=" language-cmd"><code class="language-cmd">cnpm install axios --save</code></pre><p>3-6运行项目</p><pre class=" language-cmd"><code class="language-cmd">npm run dev</code></pre><p>3-7 推荐使用Chrome浏览器<br>   输入地址 ：<a href="http://localhost:8080/">http://localhost:8080</a><br>   显示出Vue的界面证明配置成功–可以准备开发</p><h3 id="二、Vue工程开发流程"><a href="#二、Vue工程开发流程" class="headerlink" title="二、Vue工程开发流程"></a>二、Vue工程开发流程</h3><p><strong>0 在合适的位置创建新文件夹Vue_stu,并使用Vscode打开此文件夹</strong></p><blockquote><p>注：</p><p>这里（VSCODE）会有一些代码的书写提示错误（虽然没有影响程序运行，但是看起来很让人讨厌）<br>vsCode中使用ESLint自动格式化代码<br>1安装ESLint插件（如果之前没有安装的话）<br>2配置settings.json，设置启用eslint自动格式化<br>  首选项 –&gt;设置–》settings.json，将我提供的settings.json中的全部代码复制到这里并保存<br>  然后你再修改你的代码后，当保存时，系统会自动使用eslint格式进行修正</p></blockquote><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  // vscode默认启用了根据文件类型自动设置tabsize的选项  <span class="token property">"editor.detectIndentation"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  // 重新设定tabsize  <span class="token property">"editor.tabSize"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  // #每次保存的时候自动格式化   <span class="token property">"editor.formatOnSave"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  // 添加 vue 支持  <span class="token property">"eslint.validate"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token string">"javascript"</span><span class="token punctuation">,</span>    <span class="token string">"javascriptreact"</span><span class="token punctuation">,</span>    <span class="token string">"vue"</span><span class="token punctuation">,</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  //  #让prettier使用eslint的代码格式进行校验   <span class="token property">"prettier.eslintIntegration"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  //  #去掉代码结尾的分号   <span class="token property">"prettier.semi"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  //  #使用带引号替代双引号   <span class="token property">"prettier.singleQuote"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  //  #让函数(名<span class="token punctuation">)</span>和后面的括号之间加个空格  <span class="token property">"javascript.format.insertSpaceBeforeFunctionParenthesis"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  // #这个按用户自身习惯选择   <span class="token property">"vetur.format.defaultFormatter.html"</span><span class="token operator">:</span> <span class="token string">"js-beautify-html"</span><span class="token punctuation">,</span>  // #让vue中的js按编辑器自带的ts格式进行格式化   <span class="token property">"vetur.format.defaultFormatter.js"</span><span class="token operator">:</span> <span class="token string">"vscode-typescript"</span><span class="token punctuation">,</span>  <span class="token property">"vetur.format.defaultFormatterOptions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"js-beautify-html"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"wrap_attributes"</span><span class="token operator">:</span> <span class="token string">"force-aligned"</span>      // #vue组件中html代码格式化样式    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  // 格式化stylus<span class="token punctuation">,</span> 需安装Manta's Stylus Supremacy插件  <span class="token property">"stylusSupremacy.insertColons"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 是否插入冒号  <span class="token property">"stylusSupremacy.insertSemicolons"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 是否插入分好  <span class="token property">"stylusSupremacy.insertBraces"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // 是否插入大括号  <span class="token property">"stylusSupremacy.insertNewLineAroundImports"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> // import之后是否换行  <span class="token property">"stylusSupremacy.insertNewLineAroundBlocks"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token property">"editor.suggestSelection"</span><span class="token operator">:</span> <span class="token string">"first"</span><span class="token punctuation">,</span>  <span class="token property">"vsintellicode.modify.editor.suggestSelection"</span><span class="token operator">:</span> <span class="token string">"automaticallyOverrodeDefaultValue"</span><span class="token punctuation">,</span>  <span class="token property">"editor.codeActionsOnSave"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"source.fixAll.eslint"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span> // 两个选择器中是否换行<span class="token punctuation">}</span></code></pre><p><strong>1 初始化工程</strong></p><p><strong>1-1 在Vue_stu目录下创建一个名为<em>studapp</em>工程项目</strong></p><pre class=" language-cmd"><code class="language-cmd">vue init webpack studapp</code></pre><p><strong>1-2 进入[项目名]文件夹</strong></p><pre class=" language-cmd"><code class="language-cmd">cd  studapp</code></pre><p><strong>1-3 安装依赖</strong></p><pre class=" language-cmd"><code class="language-cmd">cnpm install </code></pre><p><strong>1-4 为项目安装网络请求axios</strong></p><pre class=" language-cmd"><code class="language-cmd">cnpm install axios --save</code></pre><p><strong>1-5 测试</strong></p><pre class=" language-cmd"><code class="language-cmd">npm run dev</code></pre><p><strong>2 代码开发部分</strong></p><p><strong>2-1 简单理解目录</strong></p><p>(1)文件结构简单介绍之<code>src</code>【其它的建议自行查阅官方文档】</p><p>(2)运行项目时会自动打开一个界面，是如何做到的?</p><blockquote><p>main.js—&gt;App.vue—&gt;在App.vue  打几个字试试—&gt;刷新页面 </p></blockquote><p><code>【夹在中间的界面是哪来的？】</code></p><blockquote><p>打开 components（组件）的helloworld.vue  打几个字试试—刷新页面</p><p>发现helloworld里的东西是会替换到router-view 标签   router（路由）</p></blockquote><p>(3)如何做到的的呢？</p><p>打开 <code>router/index.js</code> 发现这里面有一个routes的配置</p><blockquote><p>要点：<br>1 导入需要配置的组件 import<br>2 添加配置项 path,name,component（组件）</p></blockquote><p>这样组件就会自动替换 router-view 标签  </p><p>(4)组件的代码文档结构<br>由 &lt;template&gt;  &lt;script&gt;  &lt;style&gt; 三部分组成</p><p><strong>2-2 开发一个可以显示学校信息的页面</strong></p><p>2-2-1 创建组件<br>    <code>components/school.vue</code>   做出简单的修改</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>school<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>2-2-2 配置路由<br>(1)<code>index.js</code>  中  </p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> School <span class="token keyword">from</span> <span class="token string">'@/components/school'</span></code></pre><p>(2)添加一个新routes</p><pre class=" language-html"><code class="language-html">{    path: '/school',    name: 'School',    component: School}</code></pre><p>(3) 在index.js 的routes:上面平行添加 </p><pre class=" language-js"><code class="language-js">mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//去掉url中的#</span></code></pre><p>(4) 打开浏览器访问<a href="http://127.0.0.1:8080/school">http://127.0.0.1:8080/school</a><br>可以显示出  shool字说明成功</p><p>2-2-3 与服务端交互</p><p>(1)访问数据</p><ol><li><p>打开python服务器，测试之前接口[根据自己之前的路由名来测试]<br><a href="http://127.0.0.1:8000/first">http://127.0.0.1:8000/first</a> 得到数据<br>保持服务端服务器打开状态</p></li><li><p>打开前端工程，在school组件中编写获取服务端数据</p></li></ol><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loadSchool <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/first'</span>      Axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//   this.schools = Response.data</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>   3)请求对接<br>   报错：跨域问题<br>   <code>打开python服务端工程</code>，添加跨域支持<br>   打开<code>settings.py</code><br>    A. INSTALLED_APPS: ‘corsheaders’<br>    B. MIDDLEWARE：’corsheaders.middleware.CorsMiddleware’,<br>       必须第一项<br>    注释掉 ‘django.middleware.csrf.CsrfViewMiddleware’,<br>    C. CORS_ORIGIN_ALLOW_ALL = True  #解决跨域问题</p><p>(2)解析数据<br>school.vue中</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      schools<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loadSchool <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/first'</span>      Axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>schools <span class="token operator">=</span> Response<span class="token punctuation">.</span>data <span class="token comment" spellcheck="true">// 添加这个数据</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ol start="2"><li>在template中</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    {{schools}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li><p>测试：</p><p> 打开浏览器访问<a href="http://127.0.0.1:8080/school">http://127.0.0.1:8080/school</a></p><p> 可以看到数据，但是不友好<br> schools[0] …其它数据的显示演示</p></li></ol><p>3 让页面更美观<br>  前端UI框架—<code>ant-design-vue</code></p><pre class=" language-cmd"><code class="language-cmd">cnpm install ant-design-vue@1.7.8 --save</code></pre><p>见文档中的导入说明</p><p><a href="https://www.antdv.com/docs/vue/getting-started-cn/">ant-design-vuegu官网</a></p><p>3-1 配置新模块<br>在 <code>main.js</code>中导入下面模块</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> Antd <span class="token keyword">from</span> <span class="token string">'ant-design-vue'</span>       <span class="token comment" spellcheck="true">//这里是新的</span><span class="token keyword">import</span> <span class="token string">'ant-design-vue/dist/antd.css'</span>  <span class="token comment" spellcheck="true">//这里是新的</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Antd<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//这里是新的</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>5-2 添加列表标签<br>5-2-1在school.vue template中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>schoollist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-table</span> <span class="token attr-name">:columns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>columns<span class="token punctuation">"</span></span> <span class="token attr-name">:data-source</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>schools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>5-2-2在school.vue的script脚本</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">const</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'编号'</span><span class="token punctuation">,</span>    dataIndex<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>    key<span class="token punctuation">:</span> <span class="token string">'id'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'所在学校'</span><span class="token punctuation">,</span>    dataIndex<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>    key<span class="token punctuation">:</span> <span class="token string">'name'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      columns<span class="token punctuation">,</span>      schools<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loadSchool <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/first'</span>      Axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>schools <span class="token operator">=</span> Response<span class="token punctuation">.</span>data        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>6 再次运行项目</p><pre class=" language-cmd"><code class="language-cmd">npm run dev</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;技术交流群：932694278&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;储备知识：Python，HTML，CSS，JavaScript等计算机基础知识&lt;/p&gt;
&lt;p&gt;web框架： 别人已经设定好的一个web网站模板，你学习它的规则，然后“填空”或“修改”成你自己需要的样子。</summary>
      
    
    
    
    <category term="Web开发" scheme="https://tyisok.github.io/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
    <category term="Django" scheme="https://tyisok.github.io/tags/Django/"/>
    
    <category term="Vue" scheme="https://tyisok.github.io/tags/Vue/"/>
    
  </entry>
  
</feed>
