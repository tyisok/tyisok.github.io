<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件工程复习</title>
      <link href="2021/05/20/ruan-jian-gong-cheng-fu-xi/"/>
      <url>2021/05/20/ruan-jian-gong-cheng-fu-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-软件工程学概述"><a href="#第一章-软件工程学概述" class="headerlink" title="第一章 软件工程学概述"></a>第一章 软件工程学概述</h1><h2 id="1-1-软件危机"><a href="#1-1-软件危机" class="headerlink" title="1.1 软件危机"></a>1.1 软件危机</h2><p><strong>基本概念：</strong>在计算机软件的开发和维护过程中所遇到的一系列严重问题。</p><p><strong>软件危机的典型表现</strong>：</p><p>1、对软件开发成本和进度的估计常常很不准确<br>2、用户对“已完成的”软件系统不满意的现象经常发生<br>3、软件产品的质量往往靠不住<br>4、软件常常是不可维护的<br>5、软件通常没有适当的文档资料<br>6、软件成本在计算机系统总成本中所占的比例逐年上升<br>7、软件开发生产率提高的速度，远远跟不上计算机应用迅速普及深入的趋势</p><h2 id="1-2-软件工程"><a href="#1-2-软件工程" class="headerlink" title="1.2 软件工程"></a>1.2 软件工程</h2><p><strong>软件工程概述</strong>：软件工程是指导计算机软件开发和维护的一门工程学科。</p><p><strong>软件工程方法学</strong>：</p><p>1、传统方法学<br>2、面向对象方法学</p><h2 id="1-3-软件生命周期"><a href="#1-3-软件生命周期" class="headerlink" title="1.3 软件生命周期"></a>1.3 软件生命周期</h2><p><strong>基本概念：</strong>由软件定义、软件开发和运行维护(也称为软件维护)3个时期组成，每个时期又进一步划分成若干个阶段。</p><p><strong>三个时期（七个阶段）：</strong></p><pre class=" language-mermaid"><code class="language-mermaid">graph LRA[软件开发时期]-->B[软件定义]A-->C[软件开发]A-->D[软件维护]B-->F[问题定义]-->1[解决什么问题]B-->E[可行性研究]-->2[对于上一个阶段的问题有什么可行方法吗]B-->G[需求分析]-->3[为了解决这个问题,目标系统必须做什么]C-->H[总体设计]-->4[概括地说应该事先怎样的目标系统]C-->I[详细设计]-->5[应该怎样具体地实现这个系统呢]C-->J[编码和单元测试]-->6[写出正确的容易理解容易维护的程序模块]C-->K[综合测试]-->7[通过各种类型的测试使软件达到预定的要求]D-->8[通过各种必要的维护活动使系统持久地满足需要用户的]</code></pre><h2 id="1-4-软件过程"><a href="#1-4-软件过程" class="headerlink" title="1.4 软件过程"></a>1.4 软件过程</h2><p><strong>基本概念：</strong>软件过程是为了获得高质量软件所需要完成的一系列任务的框架，它规定了完成各项任务的工作步骤。</p><p><strong>几个模型：</strong></p><p>1 瀑布模型：瀑布模型一直是唯一被广泛采用的生命周期模型，现在它仍然是软件工程中应用得最广泛的过程模型。</p><pre class=" language-mermaid"><code class="language-mermaid">graph LRA[软件过程模型]-->1[软件定义]A-->2[软件开发]A-->3[软件维护]A-->4[软件维护]A-->5[软件维护]</code></pre><p>2 </p>]]></content>
      
      
      <categories>
          
          <category> Personal_use </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 就是学 </tag>
            
            <tag> 猛猛学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高效学习必备工具集</title>
      <link href="2021/05/19/gao-xiao-xue-xi-bi-bei-gong-ju-ji/"/>
      <url>2021/05/19/gao-xiao-xue-xi-bi-bei-gong-ju-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="线上学习网站"><a href="#线上学习网站" class="headerlink" title="线上学习网站"></a>线上学习网站</h3><p>以下网站均可在浏览器中打开</p><ol><li><a href="http://passport2.chaoxing.com/login?fid=&refer=http://i.mooc.chaoxing.com">学习通</a></li><li><a href="https://passport.zhihuishu.com/login?service=https://onlineservice.zhihuishu.com/login/gologin">智慧树在线教育_全球大型的学分课程运营服务平台（知到）</a></li><li><a href="https://www.yuketang.cn/v2/web/index">雨课堂</a></li><li>……</li><li>欢迎您的补充</li></ol><h3 id="高效学习工具分享"><a href="#高效学习工具分享" class="headerlink" title="高效学习工具分享"></a>高效学习工具分享</h3><h4 id="1-脚本类"><a href="#1-脚本类" class="headerlink" title="1 脚本类"></a>1 脚本类</h4><p><a href="https://www.tampermonkey.net/?ext=dhdg&locale=zh">油猴</a>：脚本管理工具（脚本：实现对页面的自动化控制）</p><p>Greasy Fork:<a href="https://greasyfork.org/zh-CN/scripts">开源用户脚本发布网站</a></p><p>用户脚本是一段代码，它们能够优化您的网页浏览体验。安装之后，有些脚本能为网站添加新的功能，有些能使网站的界面更加易用，有些则能隐藏网站上烦人的部分内容。在 Greasy Fork 上的用户脚本都是由用户编写并向全世界发表的，您可以免费安装，轻松体验。</p><p>按取所需，比如打开<a href="https://greasyfork.org/zh-CN/scripts/424383-%E8%B6%85%E6%98%9F%E5%AD%A6%E4%B9%A0%E9%80%9A%E7%BD%91%E8%AF%BE%E5%8A%A9%E6%89%8B-%E6%94%B9-%E6%94%AF%E6%8C%81%E5%9B%BE%E7%89%87%E9%A2%98">超星学习通网课助手(改)(支持图片题)</a>选择安装此脚本即可完成安装。简单阅读一下源代码部分，并对其中某些必要参数进行修改</p><p>打开对应的处理网站进行测试，成功则当前脚本有效，若无效，更换下一个直到成功执行相关功能即为完成</p><h4 id="2-插件类"><a href="#2-插件类" class="headerlink" title="2 插件类"></a>2 插件类</h4><p>特定工具，完成特定工作，辅助浏览器干活的工具。</p><p><a href="https://chrome.zzzmh.cn/index#ext">极简插件</a>：一个集合各种插件的网站</p><p>比如视频倍速插件Video Speed Controller</p><p><a href="https://zhaoolee.com/ChromeAppHeroes/page/005_video_speed_controller.html">Video Speed Controller 刷课（刷剧）神器！给网页视频加个速(最快可达16倍!)</a></p><p>可在极简插件那个网站中浏览并获取，具体如何安装查看网站教程，或者自行百度 “xx浏览器如何添加插件”</p>]]></content>
      
      
      <categories>
          
          <category> 学习工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Learn </tag>
            
            <tag> Tools </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前(VUE)后端(django)框架入门</title>
      <link href="2021/05/19/qian-hou-duan-kuang-jia-ru-men/"/>
      <url>2021/05/19/qian-hou-duan-kuang-jia-ru-men/</url>
      
        <content type="html"><![CDATA[<blockquote><p>储备知识：Python，HTML，CSS，JavaScript等计算机基础知识</p><p>web框架： 别人已经设定好的一个web网站模板，你学习它的规则，然后“填空”或“修改”成你自己需要的样子。</p></blockquote><span id="more"></span><h2 id="第一部分：Python-Web-框架——django"><a href="#第一部分：Python-Web-框架——django" class="headerlink" title="第一部分：Python Web 框架——django"></a>第一部分：Python Web 框架——django</h2><blockquote><p>Django是高水准的Python编程语言驱动的一个开源模型．视图，控制器风格的Web应用程序框架，它起源于开源社区。使用这种架构，程序员可以方便、快捷地创建高品质、易维护、数据库驱动的应用程序。这也正是OpenStack的Horizon组件采用这种架构进行设计的主要原因。另外，在Django框架中，还包含许多功能强大的第三方插件，使得Django具有较强的可扩展性。</p><p>Django将MVC中的视图进一步分解为 Django视图 和 Django模板两个部分，分别决定 “展现哪些数据” 和 “如何展现”，使得Django的模板可以根据需要随时替换，而不仅仅限制于内置的模板。框架把控制层给封装了，无非与数据交互这层都是数据库表的读,写,删除,更新的操作。在写程序的时候，只要调用相应的方法就行了</p><p><a href="https://zhuanlan.zhihu.com/p/27717315">https://zhuanlan.zhihu.com/p/27717315</a> 简单理解什么是MVC</p></blockquote><h3 id="一、django及其附属工具安装"><a href="#一、django及其附属工具安装" class="headerlink" title="一、django及其附属工具安装"></a>一、django及其附属工具安装</h3><p>1- 安装==<em>django</em>==开发环境</p><pre class=" language-cmd"><code class="language-cmd">pip install django</code></pre><p>2- 安装**<code>pycharm profession</code>**</p><p>(<a href="https://mp.weixin.qq.com/s/0gyxn41ck2Cd7D0jKMlS_Q">https://mp.weixin.qq.com/s/0gyxn41ck2Cd7D0jKMlS_Q</a>)</p><p>3-1 安装**<code>mysql</code>**数据库<br><a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a><br>下载并安装</p><p>3-2 安装数据库客户端 **<code>Navicat Premium 15</code>**，需破解</p><p>3-3 安装==<em>pymysql</em>==<br>这是python来操作mysql数据库的</p><pre class=" language-cmd"><code class="language-cmd">pip install pymysql</code></pre><p>4- 安装*==restframework==    ==markdown==   ==django-filter==*依赖:</p><p>主要适用于前后端分离项目</p><pre class=" language-cmd"><code class="language-cmd">pip install djangorestframework markdown Django-filter</code></pre><p>5-  安装跨域支持*==Django-cors-headers==*</p><pre class=" language-cmd"><code class="language-cmd">pip  install  Django-cors-headers</code></pre><p>6- 开发接口测试 <strong><code>Postman</code></strong><br>    下载：<a href="https://www.postman.com/downloads/">https://www.postman.com/downloads/</a></p><p>7- 测试django是否合格</p><p>7-1 在D盘创建一个英文目录Test，并在cmd中进入当前的路径，创建一个工程项目Test_django</p><pre class=" language-cmd"><code class="language-cmd">django-admin startproject Test_django</code></pre><p>7-2 更改时区和语言<br>  在 <strong>Test_django</strong>的<code>settings.py</code><br>  下面是两者任选一个，根据你的操作系统而定</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># window系统</span>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># mac系统</span>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh_Hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span></code></pre><p>7-3 在命令行中，进入工程目录Test_django，启动WEB服务</p><pre class=" language-cmd"><code class="language-cmd">cd Test_djangopython manage.py runserver</code></pre><p>显示如下内容表示服务启动成功</p><pre class=" language-cmd"><code class="language-cmd">....Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C.</code></pre><p>7-4 浏览器测试<br>   打开一个浏览器，在地址框里录入:<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a><br>    可以打开一个python Django的网页说明配置成功</p><h3 id="二、django工程开发流程"><a href="#二、django工程开发流程" class="headerlink" title="二、django工程开发流程"></a>二、django工程开发流程</h3><p><strong>0 在合适的位置创建新文件夹django_stu,并使用pycharm打开此文件夹</strong></p><p><strong>1 创建一个名为<em>StudSys</em>工程项目</strong><br>   在pycharm左下角Terminal工具 执行下面的指令：</p><pre class=" language-cmd"><code class="language-cmd">django-admin  startproject  StudSys</code></pre><p>  【命令说明】创建的工程project，下面会自动创建一个与工程名相同的文件夹以及一个manage.py文件</p><blockquote><p><strong>文件目录结构介绍：</strong><br>manage.py：用于管理项目的脚本文件，需要通过python命令执行，在cmd中执行如下格式命令</p><pre class=" language-cmd"><code class="language-cmd">python manage.py [子命令,如help等]</code></pre><p>可以通过<code>python manage.py help</code>看下其它指令功能，一般情况下不应该编辑这个文件。</p><p>与工程名相同的文件夹下：</p><p>settings.py：所有和项目相关的配置都是放在这个里面，很重要<br>urls.py：配置URL路由的文件。<br>wsgi.py：项目与WSGI协议兼容的web服务器入口，部署的时候需要用到的</p></blockquote><p><strong>2 创建一个APP，如<em>SchoolApp</em></strong><br>在Terminal工具（命令行）工具继续执行</p><pre class=" language-cmd"><code class="language-cmd">cd StudSys </code></pre><p>进入刚创建的工程目录内，执行：</p><pre class=" language-cmd"><code class="language-cmd">python manage.py  startapp  SchoolApp</code></pre><blockquote><p><strong>app是django项目的组成部分。</strong><br>   一个app代表项目中的一个模块，所有URL（统一资源定位符）请求的响应都是由app来处理。<br>   比如豆瓣，里面有图书，电影，音乐，同城等许许多多的模块，<br>   从django的角度来看，图书，电影这些模块就是app，<br>   图书，电影这些app共同组成豆瓣这个项目。<br>   因此django项目由许多app组成，一个app可以被用到其他项目，django也能拥有不同的app</p></blockquote><blockquote><p><strong>app文件夹里都有什么：</strong><br>   amdin.py: 该应用后台管理系统配置<br>   tests.py: 自动化测试模块  在这里编写测试脚本<br>   apps.py: 自动生成<br>   models.py: 数据模块——-常用模块****<br>   views.py: 视图模块  代码逻辑处理主要地点——-常用模块****</p></blockquote><p>**3 添加新的==APP==**（激活应用）<br>  在 <strong>StudSys</strong>的<code>settings.py</code><br>  找到 <em>INSTALLED_APP</em> 添加 app名称，即 <code>&#39;SchoolApp&#39;</code></p><p><strong>4 添加==rest framework==支持</strong><br>  在 <strong>StudSys</strong>的<code>settings.py</code><br>  找到 <em>INSTALLED_APP</em> 添加<code>&#39;rest_framework&#39;</code></p><p><strong>5 更改时区和语言</strong><br>  在 <strong>StudSys</strong>的<code>settings.py</code>覆盖掉下面的两个变量值<br>  下面是两者任选一个，根据你的操作系统而定</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># window系统</span>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh-hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># mac系统</span>LANGUAGE_CODE <span class="token operator">=</span> <span class="token string">'zh_Hans'</span>TIME_ZONE <span class="token operator">=</span> <span class="token string">'Asia/Shanghai'</span></code></pre><p><strong>6 启动WEB服务</strong></p><pre class=" language-cmd"><code class="language-cmd">python manage.py runserver</code></pre><p>显示如下内容表示服务启动成功</p><pre class=" language-cmd"><code class="language-cmd">....Starting development server at http://127.0.0.1:8000/Quit the server with CONTROL-C.</code></pre><p><strong>7 测试</strong><br>   打开一个浏览器，在地址框里录入:<a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a><br>    可以找开一个python Django的网页说明配置成功</p><p><strong>8 开发APIVIEW 接口:第一个服务接口</strong><br>  打开新创建的app文件夹<code>SchoolApp</code>中的<code>views.py</code>文件，将以下代码粘贴</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">class</span> <span class="token class-name">firstAPIVIEW</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 下面这两项可以让请求不用携带token值</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span></code></pre><p><strong>9 配置URL路由</strong><br>  打开工程文件夹下的 <code>urls.py</code><br>  1.导入 APP中的视图模块 ，注意导入模块是默认没有展开的，<strong>粘贴时不要错把导入模块覆盖了</strong></p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> SchoolApp<span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span></code></pre><p>  2.配置路由，本次完全覆盖此列表，之后每次新加入都是添加新的列表项</p><pre class=" language-python"><code class="language-python">urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span>firstAPIVIEW<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"firstTest"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><p>  【注】first就是一个别名，他可以帮我们找到firstAPIVIEW里面的函数</p><blockquote><p>  URL是Uniform Resource Locator的简写，统一资源定位符。<br>  一个URL由以下几部分组成：<br>  scheme://host:port/path/?query-string=xxx#anchor<br>  scheme：代表的是访问的协议，一般为http或者https以及ftp等。<br>  host：主机名，域名，比如<a href="http://www.baidu.com./">www.baidu.com。</a><br>  port：端口号。当你访问一个网站的时候，浏览器默认使用80端口。<br>  path：查找路径。比如：<a href="http://www.jianshu.com/trending/now%EF%BC%8C%E5%90%8E%E9%9D%A2%E7%9A%84trending/now%E5%B0%B1%E6%98%AFpath%E3%80%82">www.jianshu.com/trending/now，后面的trending/now就是path。</a><br>  query-string：查询字符串，比如：<a href="http://www.baidu.com/s?wd=python%EF%BC%8C%E5%90%8E%E9%9D%A2%E7%9A%84wd=python%E5%B0%B1%E6%98%AF%E6%9F%A5%E8%AF%A2%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82">www.baidu.com/s?wd=python，后面的wd=python就是查询字符串。</a><br>  anchor：锚点，后台一般不用管，前端用来做页面定位的。<br>  注意：URL中的所有字符都是ASCII字符集，如果出现非ASCII字符，<br>  比如中文，浏览器会进行编码再进行传输。</p></blockquote><p><strong>10 打开Postman 测试接口</strong><br>      如果没有安装可以使用浏览器测试<br>      <a href="http://127.0.0.1:8000/first">http://127.0.0.1:8000/first</a><br>      如果得到helloworld输出证明已经测试通过</p><p>你的第一个网络服务接口  通过测试   可以继续</p><p><strong>11 配置数据库  <code>setting.py</code></strong><br>     ==DATABASES==<br>   　默认为sqlite3，更改为mysql时，需注意版本，<br>     如果为Django2.1版本以上，mysql版本必须为5.6以上<br>     两种方案：1.降低Django版本，2.升级mysql<br>例：</p><pre class=" language-python"><code class="language-python">DATABASES <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'default'</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token string">'ENGINE'</span><span class="token punctuation">:</span> <span class="token string">'django.db.backends.mysql'</span><span class="token punctuation">,</span>        <span class="token string">'NAME'</span><span class="token punctuation">:</span> <span class="token string">'studdb'</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">##数据库名</span>        <span class="token string">'USER'</span><span class="token punctuation">:</span><span class="token string">'root'</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">##登陆名</span>        <span class="token string">'PASSWORD'</span><span class="token punctuation">:</span><span class="token string">'123456'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">##登陆密码</span>        <span class="token string">'HOST'</span><span class="token punctuation">:</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">##地址</span>        <span class="token string">'PORT'</span><span class="token punctuation">:</span><span class="token string">'3306'</span><span class="token punctuation">,</span>       <span class="token comment" spellcheck="true">##端口号</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>记得启动 mysql服务</code><br>如果报了mysql版本问题，<br>或是报Did you install mysqlclient?错误<br>需要在与<code>setting.py</code>同目录的<code>_init_.py</code>中添加</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pymysqlpymysql<span class="token punctuation">.</span>version_info <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token string">"final"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>pymysql<span class="token punctuation">.</span>install_as_MySQLdb<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><strong>12 创建数据库</strong><br>    打开mysql客户端，创建相应的数据库( 名必须是上面配置中的名一致)</p><p><strong>13  执行数据更新命令</strong><br>       执行数据库迁移</p><pre class=" language-cmd"><code class="language-cmd">python manage.py makemigrationspython manage.py migrate</code></pre><p>发现已经自动为我们创建了一些django的表</p><p><strong>14 在<code>[app名称]/models.py</code>中添加表的model</strong><br>      注意：每次添加新model后，执行13代码</p><ol><li>添加model</li></ol><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token keyword">class</span> <span class="token class-name">firstModel</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>                            default<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                            verbose_name<span class="token operator">=</span><span class="token string">"第一个数据模型"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        verbose_name<span class="token operator">=</span><span class="token string">'第一个模型'</span>        verbose_name_plural<span class="token operator">=</span>verbose_name    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>name</code></pre><ol start="2"><li>再次- 执行3-8-13 更新代码</li></ol><pre class=" language-cmd"><code class="language-cmd">python manage.py makemigrationspython manage.py migrate</code></pre><p>这里执行完后，可以检查一下看看是否已经自动为我们创建了表</p><p><strong>15 再次-修改APIVIEW 接口</strong><br>导入模型</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> firstModel<span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        _data<span class="token operator">=</span>firstModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>_data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p><strong>16 再次-打开Postman 测试接口</strong><br>1)一般会得到空值的提示，list out of range，因为还没有向表里写数据</p><p>#方法1：在表里直接写数据<br>#方法2：通过admin.py添加数据（相对复杂，可后期自学）</p><p><a href="https://blog.csdn.net/weixin_45819880/article/details/104037692">https://blog.csdn.net/weixin_45819880/article/details/104037692</a></p><ol start="2"><li>再测试：报未序列化错误<br>return Response(_data[0].name)</li></ol><p><strong>17 模型序列化</strong><br>1)在app文件夹中创建一个serializers.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> firstModel<span class="token keyword">class</span> <span class="token class-name">firstModelSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model<span class="token operator">=</span>firstModel        fields<span class="token operator">=</span><span class="token string">"__all__"</span></code></pre><p>2)打开views.py</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> firstModelSerializer        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>request<span class="token punctuation">,</span>format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        _data<span class="token operator">=</span>firstModel<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>           _data_serializer<span class="token operator">=</span>firstModelSerializer<span class="token punctuation">(</span>_data<span class="token punctuation">,</span>many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>_data_serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre><p>正常是可以看到json格式的数据</p><h3 id="三、小练习"><a href="#三、小练习" class="headerlink" title="三、小练习"></a>三、小练习</h3><p>创建<code>students</code>APP</p><p>创建模型<code>Student</code>，包括name,sex,age,class_null,description等属性，表名为tb_student</p><p>创建视图<code>StudentAPIView</code></p><p>在网页中能够看到json数据</p><h4 id="参考答案："><a href="#参考答案：" class="headerlink" title="参考答案："></a>参考答案：</h4><p>创建一个新的app：<code>students</code>，并添加在主配置文件</p><pre class=" language-cmd"><code class="language-cmd">python manage.py  startapp  students</code></pre><p>创建模型Student</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建模型Student</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"姓名"</span><span class="token punctuation">)</span>    sex<span class="token operator">=</span>models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>default<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"性别"</span><span class="token punctuation">)</span>    age <span class="token operator">=</span> models<span class="token punctuation">.</span>IntegerField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">"年龄"</span><span class="token punctuation">)</span>    class_null<span class="token operator">=</span>models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"班级编号"</span><span class="token punctuation">)</span>   description<span class="token operator">=</span>models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>max_length<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">,</span>verbose_name<span class="token operator">=</span><span class="token string">"个性签名"</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        db_table<span class="token operator">=</span><span class="token string">"tb_student"</span>        verbose_name <span class="token operator">=</span> <span class="token string">"学生"</span>        verbose_name_plural <span class="token operator">=</span> verbose_name</code></pre><p>执行数据迁移</p><pre class=" language-cmd"><code class="language-cmd">python manage.py makemigrationspython manage.py migrate</code></pre><p>创建序列化器类</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建序列化器类</span><span class="token keyword">from</span> rest_framework <span class="token keyword">import</span> serializers<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> firstModel<span class="token keyword">class</span> <span class="token class-name">StudentModelSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>        model <span class="token operator">=</span> Student        fields <span class="token operator">=</span> <span class="token string">"__all__"</span><span class="token comment" spellcheck="true"># model 指明该序列化器处理的数据字段从模型类BookInfo参考生成</span><span class="token comment" spellcheck="true"># fields 指明该序列化器包含模型类中的哪些字段，'all’指明包含所有字段</span></code></pre><p>创建视图<code>StudentViewSet</code></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 创建视图StudentAPIView</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> <span class="token punctuation">.</span>models <span class="token keyword">import</span> Student<span class="token keyword">from</span> <span class="token punctuation">.</span>serializers <span class="token keyword">import</span> StudentModelSerializer<span class="token comment" spellcheck="true"># Create your views here.</span><span class="token keyword">class</span> <span class="token class-name">StudentAPIView</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    permission_classes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> format<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>        _data <span class="token operator">=</span> Student<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>        _data_serializer <span class="token operator">=</span> StudentModelSerializer<span class="token punctuation">(</span>_data<span class="token punctuation">,</span> many<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>_data_serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span></code></pre><p>定义路由</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 定义路由</span><span class="token keyword">from</span> django<span class="token punctuation">.</span>contrib <span class="token keyword">import</span> admin<span class="token keyword">from</span> django<span class="token punctuation">.</span>urls <span class="token keyword">import</span> path<span class="token keyword">from</span> students<span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> SchoolApp<span class="token punctuation">.</span>views <span class="token keyword">import</span> <span class="token operator">*</span>urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>    path<span class="token punctuation">(</span><span class="token string">'admin/'</span><span class="token punctuation">,</span> admin<span class="token punctuation">.</span>site<span class="token punctuation">.</span>urls<span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'first'</span><span class="token punctuation">,</span>firstAPIVIEW<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"firstTest"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    path<span class="token punctuation">(</span><span class="token string">'stu/'</span><span class="token punctuation">,</span>StudentAPIView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">'student'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">]</span></code></pre><h2 id="第二部分：渐进式-JavaScript-框架——VUE"><a href="#第二部分：渐进式-JavaScript-框架——VUE" class="headerlink" title="第二部分：渐进式 JavaScript 框架——VUE"></a>第二部分：渐进式 JavaScript 框架——VUE</h2><h3 id="一、VUE及其附属工具安装"><a href="#一、VUE及其附属工具安装" class="headerlink" title="一、VUE及其附属工具安装"></a>一、VUE及其附属工具安装</h3><p>1-前置基础知识：Html标签知识、Css知识、javascript语法知识</p><p>2-Vue安装—前端工程</p><p>2-0 安装node.js</p><p><a href="http://nodejs.cn/download/">node.js下载地址</a></p><blockquote><p>提醒：</p><p>1 安装时推荐不要安装到C盘 ，但要记住安装在哪</p><p>2 nodejs安装路径下，新建node_global和node_cache两个文件夹</p><p>3 设置缓存文件夹    </p><pre class=" language-cmd"><code class="language-cmd">npm config set cache "完整安装路径\node_cache"</code></pre><p>4 设置全局模块存放路径 </p><pre class=" language-cmd"><code class="language-cmd">npm config set prefix "完整安装路径\node_global"</code></pre><p>5 设置环境变量 使得在任意目录下都可以使用cnpm、vue等命令，而不需要输入全路径<br>     修改 系统变量 PATH，添加新的全局路径 <code>完整路径\node_global</code><br>     新增 系统变量 NODE_PATH  <code>完整路径\node_modules</code></p></blockquote><p>2-1安装==淘宝镜像==</p><pre class=" language-cmd"><code class="language-cmd">npm install -g cnpm --registry=HTTPS://registry.npm.taobao.org</code></pre><p>2-2 安装==vue.js==</p><pre class=" language-cmd"><code class="language-cmd">mac:   cnpm install -global vue-cliwin:   cnpm install vue-cli -g</code></pre><p>2-3安装==Visual Studio Code==</p><p><a href="https://code.visualstudio.com/">vscode下载地址</a></p><blockquote><p>添加对vue支持的插件</p><p>Vetur、EsLint、Debugger for Chrome、<br> Auto Close Tag、Auto Rename Tag、JavaScript(ES6) code snippets、<br> Path Intellisense、HTML CSS Support、<br> Beautify、Bracket Pair Colorizer、open in browser</p></blockquote><p>3-测试是否安装成功<br>【创建并进入测试目录Test_Vue中】<br>3-1在命令行创建前端测试工程项目—testapp</p><pre class=" language-cmd"><code class="language-cmd"># 标准格式# vue init webpack [项目名]# 例：vue init webpack testapp# 或 3.0以上 s# vue create [项目名]vue create testapp</code></pre><p>3-2安装router—新的版本可能会提供自动提示安装（一路猛回车即可）</p><pre class=" language-cmd"><code class="language-cmd">cnpm i vue-router -D</code></pre><p>3-3 进入[项目名]文件夹————!!</p><pre class=" language-cmd"><code class="language-cmd">cd  testapp</code></pre><p>3-4 安装依赖</p><pre class=" language-cmd"><code class="language-cmd">cnpm install </code></pre><p>3-5 为项目安装网络请求axios</p><pre class=" language-cmd"><code class="language-cmd">cnpm install axios --save</code></pre><p>3-6运行项目</p><pre class=" language-cmd"><code class="language-cmd">npm run dev</code></pre><p>3-7 推荐使用Chrome浏览器<br>   输入地址 ：<a href="http://localhost:8080/">http://localhost:8080</a><br>   显示出Vue的界面证明配置成功–可以准备开发</p><h3 id="二、Vue工程开发流程"><a href="#二、Vue工程开发流程" class="headerlink" title="二、Vue工程开发流程"></a>二、Vue工程开发流程</h3><p><strong>0 在合适的位置创建新文件夹Vue_stu,并使用Vscode打开此文件夹</strong></p><p><strong>1 初始化工程</strong></p><p><strong>1-1 在Vue_stu目录下创建一个名为<em>studapp</em>工程项目</strong></p><pre class=" language-cmd"><code class="language-cmd">vue init webpack studapp</code></pre><p><strong>1-2 进入[项目名]文件夹</strong></p><pre class=" language-cmd"><code class="language-cmd">cd  studapp</code></pre><p><strong>1-3 安装依赖</strong></p><pre class=" language-cmd"><code class="language-cmd">cnpm install </code></pre><p><strong>1-4 为项目安装网络请求axios</strong></p><pre class=" language-cmd"><code class="language-cmd">cnpm install axios --save</code></pre><p><strong>1-5 测试</strong></p><pre class=" language-cmd"><code class="language-cmd">npm run dev</code></pre><p><strong>2 代码开发部分</strong></p><p><strong>2-1 简单理解目录</strong></p><p>(1)文件结构简单介绍之<code>src</code>【其它的建议自行查阅官方文档】</p><p>(2)运行项目时会自动打开一个界面，是如何做到的?</p><blockquote><p>main.js—&gt;App.vue—&gt;在App.vue  打几个字试试—&gt;刷新页面 </p></blockquote><p><code>【夹在中间的界面是哪来的？】</code></p><blockquote><p>打开 components（组件）的helloworld.vue  打几个字试试—刷新页面</p><p>发现helloworld里的东西是会替换到router-view 标签</p></blockquote><p>(3)如何做到的的呢？</p><p>打开 <code>router/index.js</code> 发现这里面有一个routes的配置</p><blockquote><p>要点：<br>1 导入需要配置的组件 import<br>2 添加配置项 path,name,component（组件）</p></blockquote><p>这样组件就会自动替换 router-view 标签  </p><p>(4)组件的代码文档结构<br>由 &lt;template&gt;  &lt;script&gt;  &lt;style&gt; 三部分组成</p><p><strong>2-2 开发一个可以显示学校信息的页面</strong></p><p>2-2-1 创建组件<br>    <code>components/school.vue</code>   做出简单的修改</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>school<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>2-2-2 配置路由<br>(1)<code>index.js</code>  中  </p><pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> School <span class="token keyword">from</span> <span class="token string">'@/components/school'</span></code></pre><p>(2)添加一个新routes</p><pre class=" language-html"><code class="language-html">{    path: '/school',    name: 'School',    component: School}</code></pre><p>(3) 在index.js 的routes:上面平行添加 </p><pre class=" language-js"><code class="language-js">mode<span class="token punctuation">:</span> <span class="token string">'history'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//去掉url中的#</span></code></pre><p>(4) 打开浏览器访问<a href="http://127.0.0.1:8080/school">http://127.0.0.1:8080/school</a><br>可以显示出  shool字说明成功</p><p>2-2-3 与服务端交互</p><p>(1)访问数据</p><ol><li><p>打开python服务器，测试之前接口[根据自己之前的路由名来测试]<br><a href="http://127.0.0.1:8000/first">http://127.0.0.1:8000/first</a> 得到数据<br>保持服务端服务器打开状态</p></li><li><p>打开前端工程，在school组件中编写获取服务端数据</p></li></ol><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loadSchool <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/first'</span>      Axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//   this.schools = Response.data</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>   3)请求对接<br>   报错：跨域问题<br>   <code>打开python服务端工程</code>，添加跨域支持<br>   打开<code>settings.py</code><br>    A. INSTALLED_APPS: ‘corsheaders’<br>    B. MIDDLEWARE：’corsheaders.middleware.CorsMiddleware’,<br>       必须第一项<br>    注释掉 ‘django.middleware.csrf.CsrfViewMiddleware’,<br>    C. CORS_ORIGIN_ALLOW_ALL=True  #解决跨域问题</p><p>(2)解析数据<br>school.vue中</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      schools<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 添加了一个获取数据的方法</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loadSchool <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/first'</span>      Axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">//   this.schools = Response.data</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><ol start="2"><li>在template中</li></ol><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    {{schools}}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>测试：可以看到数据，但是不友好<br> schools[0] …其它数据的显示演示</li></ol><p>3 让页面更美观<br>  前端UI框架—<code>ant-design-vue</code></p><pre class=" language-cmd"><code class="language-cmd">cnpm install ant-design-vue --save</code></pre><p>见文档中的导入说明</p><p><a href="https://www.antdv.com/docs/vue/getting-started-cn/">ant-design-vuegu官网</a></p><p>3-1 配置新模块<br>在 <code>main.js</code>中导入下面模块</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> Antd <span class="token keyword">from</span> <span class="token string">'ant-design-vue'</span>       <span class="token comment" spellcheck="true">//这里是新的</span><span class="token keyword">import</span> <span class="token string">'ant-design-vue/dist/antd.css'</span>  <span class="token comment" spellcheck="true">//这里是新的</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Antd<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//这里是新的</span><span class="token comment" spellcheck="true">/* eslint-disable no-new */</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  el<span class="token punctuation">:</span> <span class="token string">'#app'</span><span class="token punctuation">,</span>  router<span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span> App <span class="token punctuation">}</span><span class="token punctuation">,</span>  template<span class="token punctuation">:</span> <span class="token string">'&lt;App/>'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>5-2 添加列表标签<br>5-2-1在school.vue template中</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>schoollist<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a-table</span> <span class="token attr-name">:columns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>columns<span class="token punctuation">"</span></span> <span class="token attr-name">:data-source</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>schools<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a-table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span></code></pre><p>5-2-2在school.vue的script脚本</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token keyword">import</span> Axios <span class="token keyword">from</span> <span class="token string">'axios'</span><span class="token keyword">const</span> columns <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'编号'</span><span class="token punctuation">,</span>    dataIndex<span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">,</span>    key<span class="token punctuation">:</span> <span class="token string">'id'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">{</span>    title<span class="token punctuation">:</span> <span class="token string">'所在学校'</span><span class="token punctuation">,</span>    dataIndex<span class="token punctuation">:</span> <span class="token string">'name'</span><span class="token punctuation">,</span>    key<span class="token punctuation">:</span> <span class="token string">'name'</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  data <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      columns<span class="token punctuation">,</span>      schools<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    loadSchool <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">var</span> api <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:8000/first'</span>      Axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>api<span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Response<span class="token punctuation">.</span>data<span class="token punctuation">)</span>          <span class="token keyword">this</span><span class="token punctuation">.</span>schools <span class="token operator">=</span> Response<span class="token punctuation">.</span>data        <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mounted <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">loadSchool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Web开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="2021/05/18/hello-world/"/>
      <url>2021/05/18/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
